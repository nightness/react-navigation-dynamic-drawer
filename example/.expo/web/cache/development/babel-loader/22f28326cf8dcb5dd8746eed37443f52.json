{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\navigation\\\\DrawerNavigator.tsx\";\n\nimport 'react-native-gesture-handler';\nimport React, { useReducer } from 'react';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { DrawerProvider } from \"../navigation/DrawerContext\";\nimport { DrawerContent } from \"./DrawerContent\";\nimport { ScreensReducer } from \"./RoutingReducer\";\nvar Drawer = createDrawerNavigator();\nexport default (function (_ref) {\n  var initialScreens = _ref.initialScreens,\n      restProps = _objectWithoutProperties(_ref, [\"initialScreens\"]);\n\n  var _useReducer = useReducer(ScreensReducer, initialScreens),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      screens = _useReducer2[0],\n      screensDispatch = _useReducer2[1];\n\n  var parentStack = ['[root]'];\n  var currentDepth = -1;\n  return React.createElement(DrawerProvider, {\n    screens: screens,\n    screensDispatch: screensDispatch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, React.createElement(Drawer.Navigator, _extends({}, restProps, {\n    drawerContent: function drawerContent(props) {\n      return React.createElement(DrawerContent, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 41\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }), screens.map(function (screen) {\n    var depthDelta = screen.depth - currentDepth;\n\n    if (screen.depth > currentDepth) {\n      if (depthDelta !== 1) throw new Error('depth step up change does not equal 1');\n      currentDepth++;\n      parentStack.push(screen.routeName);\n    }\n\n    if (screen.depth < currentDepth) {\n      for (var i = depthDelta; i < 0; i++) {\n        currentDepth--;\n        parentStack.pop();\n      }\n    }\n\n    return React.createElement(Drawer.Screen, {\n      name: screen.routeName,\n      component: screen.component,\n      initialParams: screen.initialParams,\n      key: \"\" + parentStack.join(String.fromCharCode(255)),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }\n    });\n  })));\n});","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/navigation/DrawerNavigator.tsx"],"names":["React","useReducer","createDrawerNavigator","DrawerProvider","DrawerContent","ScreensReducer","Drawer","initialScreens","restProps","screens","screensDispatch","parentStack","currentDepth","props","map","screen","depthDelta","depth","Error","push","routeName","i","pop","component","initialParams","join","String","fromCharCode"],"mappings":";;;;;;;AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,cAAT;AACA,SAASC,aAAT;AACA,SAASC,cAAT;AAIA,IAAMC,MAAM,GAAGJ,qBAAqB,EAApC;AAOA,gBAAe,gBAA6C;AAAA,MAA1CK,cAA0C,QAA1CA,cAA0C;AAAA,MAAvBC,SAAuB;;AAAA,oBAErBP,UAAU,CAACI,cAAD,EAAiBE,cAAjB,CAFW;AAAA;AAAA,MAEjDE,OAFiD;AAAA,MAExCC,eAFwC;;AAIxD,MAAIC,WAAqB,GAAG,CAAC,QAAD,CAA5B;AACA,MAAIC,YAAY,GAAG,CAAC,CAApB;AAEA,SACI,oBAAC,cAAD;AAAgB,IAAA,OAAO,EAAEH,OAAzB;AAAkC,IAAA,eAAe,EAAEC,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD,CAAQ,SAAR,eACQF,SADR;AAEI,IAAA,aAAa,EAAE,uBAAAK,KAAK;AAAA,aAAI,oBAAC,aAAD,eAAmBA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA,KAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGKJ,OAAO,CAACK,GAAR,CAAY,UAACC,MAAD,EAAY;AACrB,QAAMC,UAAU,GAAGD,MAAM,CAACE,KAAP,GAAeL,YAAlC;;AAEA,QAAIG,MAAM,CAACE,KAAP,GAAeL,YAAnB,EAAiC;AAC7B,UAAII,UAAU,KAAK,CAAnB,EACI,MAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AACJN,MAAAA,YAAY;AACZD,MAAAA,WAAW,CAACQ,IAAZ,CAAiBJ,MAAM,CAACK,SAAxB;AACH;;AAED,QAAIL,MAAM,CAACE,KAAP,GAAeL,YAAnB,EAAiC;AAC7B,WAAK,IAAIS,CAAC,GAAGL,UAAb,EAAyBK,CAAC,GAAG,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;AACjCT,QAAAA,YAAY;AACZD,QAAAA,WAAW,CAACW,GAAZ;AACH;AACJ;;AACD,WACI,oBAAC,MAAD,CAAQ,MAAR;AACI,MAAA,IAAI,EAAEP,MAAM,CAACK,SADjB;AAEI,MAAA,SAAS,EAAEL,MAAM,CAACQ,SAFtB;AAGI,MAAA,aAAa,EAAER,MAAM,CAACS,aAH1B;AAII,MAAA,GAAG,OAAKb,WAAW,CAACc,IAAZ,CAAiBC,MAAM,CAACC,YAAP,CAAoB,GAApB,CAAjB,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH,GAvBA,CAHL,CADJ,CADJ;AAgCH,CAvCD","sourcesContent":["import 'react-native-gesture-handler'\r\nimport React, { useReducer } from 'react'\r\nimport { createDrawerNavigator } from '@react-navigation/drawer'\r\nimport { DrawerProvider } from '../navigation/DrawerContext'\r\nimport { DrawerContent } from './DrawerContent'\r\nimport { ScreensReducer } from './RoutingReducer'\r\nimport { NavigationElements } from './NavigationTypes'\r\nimport { StyleProp, ViewStyle } from 'react-native'\r\n\r\nconst Drawer = createDrawerNavigator()\r\n\r\ninterface Props {\r\n    initialScreens: NavigationElements,\r\n    drawerStyle?: StyleProp<ViewStyle>\r\n}\r\n\r\nexport default ({ initialScreens, ...restProps }: Props) => {\r\n    // The stateful list of screens\r\n    const [screens, screensDispatch] = useReducer(ScreensReducer, initialScreens)\r\n\r\n    let parentStack: [string] = ['[root]']\r\n    let currentDepth = -1\r\n\r\n    return (\r\n        <DrawerProvider screens={screens} screensDispatch={screensDispatch}>\r\n            <Drawer.Navigator\r\n                {...restProps}\r\n                drawerContent={props => <DrawerContent {...props} />}>\r\n                {screens.map((screen) => {\r\n                    const depthDelta = screen.depth - currentDepth\r\n                    // Depth increased since last screen\r\n                    if (screen.depth > currentDepth) {\r\n                        if (depthDelta !== 1)\r\n                            throw new Error('depth step up change does not equal 1');                          \r\n                        currentDepth++\r\n                        parentStack.push(screen.routeName)\r\n                    }\r\n                    // Depth decreased since last screen\r\n                    if (screen.depth < currentDepth) {\r\n                        for (let i = depthDelta; i < 0; i++) {\r\n                            currentDepth--\r\n                            parentStack.pop()\r\n                        }\r\n                    }\r\n                    return (\r\n                        <Drawer.Screen\r\n                            name={screen.routeName}\r\n                            component={screen.component}\r\n                            initialParams={screen.initialParams}\r\n                            key={`${parentStack.join(String.fromCharCode(255))}`} />\r\n                    )\r\n                })}\r\n            </Drawer.Navigator>\r\n        </DrawerProvider>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}