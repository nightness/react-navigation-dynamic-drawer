{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\navigation\\\\DrawerNavigator.tsx\";\n\nimport 'react-native-gesture-handler';\nimport React, { useReducer } from 'react';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { DrawerProvider } from \"../navigation/DrawerContext\";\nimport { DrawerContent } from \"./DrawerContent\";\nimport { ScreensReducer } from \"./RoutingReducer\";\nvar Drawer = createDrawerNavigator();\nexport default (function (_ref) {\n  var initialScreens = _ref.initialScreens,\n      restProps = _objectWithoutProperties(_ref, [\"initialScreens\"]);\n\n  var _useReducer = useReducer(ScreensReducer, initialScreens),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      screens = _useReducer2[0],\n      screensDispatch = _useReducer2[1];\n\n  var parentStack = ['[root]'];\n  var currentDepth = 0;\n\n  var push = function push(screenName) {\n    parentStack.push(screenName);\n  };\n\n  var pop = function pop() {\n    var element = parentStack.pop();\n  };\n\n  return React.createElement(DrawerProvider, {\n    screens: screens,\n    screensDispatch: screensDispatch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, React.createElement(Drawer.Navigator, _extends({}, restProps, {\n    drawerContent: function drawerContent(props) {\n      return React.createElement(DrawerContent, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 41\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), screens.map(function (screen) {\n    if (screen.depth > currentDepth) {\n      currentDepth++;\n      push(screen.name);\n    }\n\n    if (screen.depth < currentDepth) {\n      currentDepth--;\n      pop();\n    }\n\n    return React.createElement(Drawer.Screen, {\n      name: screen.name,\n      component: screen.component,\n      initialParams: screen.initialParams,\n      key: \"\" + parentStack.join('-'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }\n    });\n  })));\n});","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/navigation/DrawerNavigator.tsx"],"names":["React","useReducer","createDrawerNavigator","DrawerProvider","DrawerContent","ScreensReducer","Drawer","initialScreens","restProps","screens","screensDispatch","parentStack","currentDepth","push","screenName","pop","element","props","map","screen","depth","name","component","initialParams","join"],"mappings":";;;;;;;AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,IAA4BC,UAA5B,QAA8C,OAA9C;AAEA,SAASC,qBAAT,QAA+D,0BAA/D;AACA,SAASC,cAAT;AACA,SAASC,aAAT;AACA,SAASC,cAAT;AAIA,IAAMC,MAAM,GAAGJ,qBAAqB,EAApC;AAOA,gBAAe,gBAA6C;AAAA,MAA1CK,cAA0C,QAA1CA,cAA0C;AAAA,MAAvBC,SAAuB;;AAAA,oBAErBP,UAAU,CAACI,cAAD,EAAiBE,cAAjB,CAFW;AAAA;AAAA,MAEjDE,OAFiD;AAAA,MAExCC,eAFwC;;AAGxD,MAAIC,WAAqB,GAAG,CAAC,QAAD,CAA5B;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,UAAD,EAAwB;AACjCH,IAAAA,WAAW,CAACE,IAAZ,CAAiBC,UAAjB;AACH,GAFD;;AAIA,MAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AACd,QAAMC,OAAO,GAAGL,WAAW,CAACI,GAAZ,EAAhB;AACH,GAFD;;AAIA,SACI,oBAAC,cAAD;AAAgB,IAAA,OAAO,EAAEN,OAAzB;AAAkC,IAAA,eAAe,EAAEC,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD,CAAQ,SAAR,eACQF,SADR;AAEI,IAAA,aAAa,EAAE,uBAAAS,KAAK;AAAA,aAAI,oBAAC,aAAD,eAAmBA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA,KAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIKR,OAAO,CAACS,GAAR,CAAY,UAACC,MAAD,EAAY;AACrB,QAAIA,MAAM,CAACC,KAAP,GAAeR,YAAnB,EAAiC;AAC7BA,MAAAA,YAAY;AACZC,MAAAA,IAAI,CAACM,MAAM,CAACE,IAAR,CAAJ;AACH;;AACD,QAAIF,MAAM,CAACC,KAAP,GAAeR,YAAnB,EAAiC;AAC7BA,MAAAA,YAAY;AACZG,MAAAA,GAAG;AACN;;AACD,WACI,oBAAC,MAAD,CAAQ,MAAR;AACI,MAAA,IAAI,EAAEI,MAAM,CAACE,IADjB;AAEI,MAAA,SAAS,EAAEF,MAAM,CAACG,SAFtB;AAGI,MAAA,aAAa,EAAEH,MAAM,CAACI,aAH1B;AAII,MAAA,GAAG,OAAKZ,WAAW,CAACa,IAAZ,CAAiB,GAAjB,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH,GAhBA,CAJL,CADJ,CADJ;AA0BH,CAxCD","sourcesContent":["import 'react-native-gesture-handler'\r\nimport React, { useContext, useReducer } from 'react'\r\nimport Collapsible from 'react-native-collapsible'\r\nimport { createDrawerNavigator, DrawerContentScrollView } from '@react-navigation/drawer'\r\nimport { DrawerProvider } from '../navigation/DrawerContext'\r\nimport { DrawerContent } from './DrawerContent'\r\nimport { ScreensReducer } from './RoutingReducer'\r\nimport { NavigationElement, NavigationElements } from './NavigationTypes'\r\nimport { StyleProp, ViewStyle } from 'react-native'\r\n\r\nconst Drawer = createDrawerNavigator()\r\n\r\ninterface Props {\r\n    initialScreens: NavigationElements,\r\n    drawerStyle?: StyleProp<ViewStyle>\r\n}\r\n\r\nexport default ({ initialScreens, ...restProps }: Props) => {\r\n    // The stateful list of screens\r\n    const [screens, screensDispatch] = useReducer(ScreensReducer, initialScreens)\r\n    let parentStack: [string] = ['[root]']\r\n    let currentDepth = 0\r\n\r\n    const push = (screenName: string) => {\r\n        parentStack.push(screenName)\r\n    }\r\n\r\n    const pop = () => {\r\n        const element = parentStack.pop()\r\n    }\r\n\r\n    return (\r\n        <DrawerProvider screens={screens} screensDispatch={screensDispatch}>\r\n            <Drawer.Navigator\r\n                {...restProps}\r\n                drawerContent={props => <DrawerContent {...props} />}>\r\n                {/* Root nodes */}                \r\n                {screens.map((screen) => {                    \r\n                    if (screen.depth > currentDepth) {\r\n                        currentDepth++\r\n                        push(screen.name)\r\n                    }\r\n                    if (screen.depth < currentDepth) {\r\n                        currentDepth--\r\n                        pop()\r\n                    }                    \r\n                    return (\r\n                        <Drawer.Screen\r\n                            name={screen.name}\r\n                            component={screen.component}\r\n                            initialParams={screen.initialParams}\r\n                            key={`${parentStack.join('-')}`} />\r\n                    )\r\n                })}\r\n            </Drawer.Navigator>\r\n        </DrawerProvider>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}