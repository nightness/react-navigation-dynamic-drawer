{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\example\\\\navigation\\\\DrawerContentItem.tsx\";\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { DrawerItem } from '@react-navigation/drawer';\nimport { Text, Badge, Icon } from 'react-native-elements';\nexport default (function (_ref) {\n  var focusedIconName = _ref.focusedIconName,\n      iconGroup = _ref.iconGroup,\n      iconName = _ref.iconName,\n      focused = _ref.focused,\n      labelText = _ref.labelText,\n      badgeText = _ref.badgeText,\n      restProps = _objectWithoutProperties(_ref, [\"focusedIconName\", \"iconGroup\", \"iconName\", \"focused\", \"labelText\", \"badgeText\"]);\n\n  return React.createElement(DrawerItem, _extends({\n    pressOpacity: \"90%\",\n    focused: focused,\n    label: function label() {\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          marginLeft: -15,\n          flexDirection: 'row'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          flex: 3,\n          fontWeight: '600'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, labelText), badgeText ? React.createElement(Badge, {\n        badgeStyle: {\n          height: 22\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }\n      }, badgeText) : React.createElement(React.Fragment, null));\n    },\n    icon: function icon(_ref2) {\n      var focused = _ref2.focused,\n          color = _ref2.color,\n          size = _ref2.size;\n      return React.createElement(Icon, {\n        color: color,\n        size: size,\n        name: iconName,\n        type: iconGroup,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      });\n    }\n  }, restProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }));\n});","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/example/navigation/DrawerContentItem.tsx"],"names":["React","DrawerItem","Text","Badge","Icon","focusedIconName","iconGroup","iconName","focused","labelText","badgeText","restProps","flex","marginLeft","flexDirection","fontWeight","height","color","size"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,QAAkC,uBAAlC;AAsEA,gBAAe,gBAAkG;AAAA,MAA/FC,eAA+F,QAA/FA,eAA+F;AAAA,MAA9EC,SAA8E,QAA9EA,SAA8E;AAAA,MAAnEC,QAAmE,QAAnEA,QAAmE;AAAA,MAAzDC,OAAyD,QAAzDA,OAAyD;AAAA,MAAhDC,SAAgD,QAAhDA,SAAgD;AAAA,MAArCC,SAAqC,QAArCA,SAAqC;AAAA,MAAvBC,SAAuB;;AAC7G,SACI,oBAAC,UAAD;AACI,IAAA,YAAY,EAAC,KADjB;AAEI,IAAA,OAAO,EAAEH,OAFb;AAGI,IAAA,KAAK,EAAE;AAAA,aACH,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEI,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,UAAU,EAAE,CAAC,EAAxB;AAA4BC,UAAAA,aAAa,EAAE;AAA3C,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEF,UAAAA,IAAI,EAAE,CAAR;AAAWG,UAAAA,UAAU,EAAE;AAAvB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8CN,SAA9C,CADJ,EAEMC,SAAS,GACP,oBAAC,KAAD;AAAO,QAAA,UAAU,EAAE;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoCN,SAApC,CADO,GAEL,yCAJV,CADG;AAAA,KAHX;AAYI,IAAA,IAAI,EAAE,qBAA8B;AAAA,UAA3BF,OAA2B,SAA3BA,OAA2B;AAAA,UAAlBS,KAAkB,SAAlBA,KAAkB;AAAA,UAAXC,IAAW,SAAXA,IAAW;AAChC,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,KAAb;AAAoB,QAAA,IAAI,EAAEC,IAA1B;AAAgC,QAAA,IAAI,EAAEX,QAAtC;AAAgD,QAAA,IAAI,EAAED,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;AAhBL,KAiBQK,SAjBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAqBH,CAtBD","sourcesContent":["import React from 'react'\r\nimport { StyleProp, TextStyle, ViewStyle, View } from 'react-native'\r\nimport { DrawerItem } from '@react-navigation/drawer'\r\nimport { DrawerNavigationHelpers } from '@react-navigation/drawer/lib/typescript/src/types'\r\nimport { Text, Badge, Icon } from 'react-native-elements'\r\n\r\ndeclare type Props = {\r\n    /**\r\n     * The label text of the item.\r\n     */\r\n    labelText: string;\r\n    badgeText?: string;\r\n    /**\r\n     * Icons to display for the `DrawerItem`.\r\n     */\r\n    iconGroup?: string;\r\n    iconName: string;\r\n    focusedIconName?: string;\r\n    /**\r\n     * URL to use for the link to the tab.\r\n     */\r\n    to?: string;\r\n    /**\r\n     * Whether to highlight the drawer item as active.\r\n     */\r\n    focused?: boolean;\r\n    /**\r\n     * Function to execute on press.\r\n     */\r\n    onPress: () => void;\r\n    /**\r\n     * Color for the icon and label when the item is active.\r\n     */\r\n    activeTintColor?: string;\r\n    /**\r\n     * Color for the icon and label when the item is inactive.\r\n     */\r\n    inactiveTintColor?: string;\r\n    /**\r\n     * Background color for item when its active.\r\n     */\r\n    activeBackgroundColor?: string;\r\n    /**\r\n     * Background color for item when its inactive.\r\n     */\r\n    inactiveBackgroundColor?: string;\r\n    /**\r\n     * Color of the touchable effect on press.\r\n     * Only supported on Android.\r\n     *\r\n     * @platform android\r\n     */\r\n    pressColor?: string;\r\n    /**\r\n     * Opacity of the touchable effect on press.\r\n     * Only supported on iOS.\r\n     *\r\n     * @platform ios\r\n     */\r\n    pressOpacity?: string;\r\n    /**\r\n     * Style object for the label element.\r\n     */\r\n    labelStyle?: StyleProp<TextStyle>;\r\n    /**\r\n     * Style object for the wrapper element.\r\n     */\r\n    style?: StyleProp<ViewStyle>;\r\n    /**\r\n     * navigation prop\r\n     */\r\n    navigation: DrawerNavigationHelpers\r\n}\r\n\r\nexport default ({ focusedIconName, iconGroup, iconName, focused, labelText, badgeText, ...restProps }: Props) => {\r\n    return (\r\n        <DrawerItem            \r\n            pressOpacity='90%'\r\n            focused={focused}\r\n            label={() => (\r\n                <View style={{ flex: 1, marginLeft: -15, flexDirection: 'row' }}>\r\n                    <Text style={{ flex: 3, fontWeight: '600' }}>{labelText}</Text>\r\n                    { badgeText ?\r\n                        <Badge badgeStyle={{ height: 22 }}>{badgeText}</Badge>\r\n                        : <></>\r\n                    }\r\n                </View>\r\n            )}\r\n            icon={({ focused, color, size }) => {\r\n                return (\r\n                    <Icon color={color} size={size} name={iconName} type={iconGroup} />\r\n                )\r\n            }}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}