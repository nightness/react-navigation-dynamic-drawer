{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\navigation\\\\DrawerContent.tsx\";\n\nimport React, { useContext, useEffect } from 'react';\nimport { DrawerContentScrollView } from '@react-navigation/drawer';\nimport { DrawerContext } from \"./DrawerContext\";\nimport DrawerContentItem from \"./DrawerContentItem\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport View from \"react-native-web/dist/exports/View\";\nexport var DrawerContent = function DrawerContent(props) {\n  var _useContext = useContext(DrawerContext),\n      badges = _useContext.badges,\n      screens = _useContext.screens,\n      setDrawerContent = _useContext.setDrawerContent;\n\n  var state = props.state,\n      navigation = props.navigation;\n  var routeNames = state.routeNames,\n      routes = state.routes;\n\n  var navigateTo = function navigateTo(screenName) {\n    navigation.closeDrawer();\n    navigation.navigate(screenName);\n  };\n\n  var parentStack = [];\n  var currentDepth = 0;\n  useEffect(function () {\n    setDrawerContent(navigation, state);\n  });\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, React.createElement(DrawerContentScrollView, _extends({\n    bounces: false\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }), routeNames.map(function (routeName, routeIndex) {\n    var _routes$filter;\n\n    var currentRoute = (_routes$filter = routes.filter(function (value) {\n      return value.name === routeName;\n    })) == null ? void 0 : _routes$filter[0];\n    var params = currentRoute.params;\n    var _screens$routeIndex = screens[routeIndex],\n        depth = _screens$routeIndex.depth,\n        isHidden = _screens$routeIndex.isHidden;\n\n    if (depth > currentDepth) {\n      currentDepth++;\n      parentStack.push(screens[routeIndex - 1]);\n    } else if (depth < currentDepth) {\n      currentDepth--;\n      parentStack.pop();\n    }\n\n    var isParentVisible = parentStack.filter(function (item) {\n      return !item;\n    }).length > 0;\n    console.log(\"name=\" + name + \" depth=\" + depth + \" isVisible=\" + !isHidden + \" parent=\" + isParentVisible);\n    if (isHidden) return React.createElement(View, {\n      key: \"\" + routeName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 33\n      }\n    });\n    return React.createElement(DrawerContentItem, _extends({}, props, {\n      activeTintColor: params == null ? void 0 : params.activeTintColor,\n      inactiveTintColor: params == null ? void 0 : params.inactiveTintColor,\n      labelText: routeName,\n      iconGroup: params == null ? void 0 : params.iconGroup,\n      iconName: params == null ? void 0 : params.iconName,\n      focusedIconName: params == null ? void 0 : params.focusedIconName,\n      onPress: function onPress() {\n        return navigateTo(routeName);\n      },\n      key: \"route-\" + routeName + \"-\" + Math.random(),\n      badgeText: badges[routeName],\n      style: {\n        marginLeft: 15 * depth\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }\n    }));\n  })));\n};","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/navigation/DrawerContent.tsx"],"names":["React","useContext","useEffect","DrawerContentScrollView","DrawerContext","DrawerContentItem","SafeAreaView","DrawerContent","props","badges","screens","setDrawerContent","state","navigation","routeNames","routes","navigateTo","screenName","closeDrawer","navigate","parentStack","currentDepth","flex","map","routeName","routeIndex","currentRoute","filter","value","name","params","depth","isHidden","push","pop","isParentVisible","item","length","console","log","activeTintColor","inactiveTintColor","iconGroup","iconName","focusedIconName","Math","random","marginLeft"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\r\nimport {\r\n    DrawerContentScrollView,\r\n    DrawerContentComponentProps,\r\n} from '@react-navigation/drawer'\r\nimport { DrawerContext } from './DrawerContext'\r\nimport DrawerContentItem from './DrawerContentItem'\r\nimport { NavigationElement, NavigationElements, NavigationParams } from './NavigationTypes'\r\nimport { SafeAreaView } from 'react-native-safe-area-context'\r\nimport { Drawer } from 'react-native-paper'\r\nimport { View } from 'react-native'\r\n\r\nexport const DrawerContent = (props: DrawerContentComponentProps) => {\r\n    const { badges, screens, setDrawerContent } = useContext(DrawerContext)\r\n    const { state, navigation } = props;\r\n    const { routeNames, routes } = state\r\n    const navigateTo = (screenName: string) => {\r\n        navigation.closeDrawer()\r\n        navigation.navigate(screenName)\r\n    }\r\n\r\n    let parentStack: NavigationElements = []\r\n    let currentDepth = 0\r\n\r\n    useEffect(() => {\r\n        setDrawerContent(navigation, state)\r\n    })\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n            <DrawerContentScrollView bounces={false} {...props}>\r\n                {routeNames.map((routeName, routeIndex) => {\r\n                    const currentRoute = routes.filter(value => value.name === routeName)?.[0]\r\n                    const params = currentRoute.params as NavigationParams\r\n                    const { depth, isHidden } = screens[routeIndex]                    \r\n                    if (depth > currentDepth) {\r\n                        currentDepth++\r\n                        parentStack.push(screens[routeIndex - 1])\r\n                    }\r\n                    else if (depth < currentDepth) {\r\n                        currentDepth--\r\n                        parentStack.pop()\r\n                    }\r\n                    const isParentVisible = parentStack.filter((item) => !item).length > 0\r\n                    \r\n                    console.log(`name=${name} depth=${depth} isVisible=${!isHidden} parent=${isParentVisible}`)\r\n\r\n                    if (isHidden)\r\n                        return (<View key={`${routeName}`}></View>)\r\n\r\n                    return (\r\n                        <DrawerContentItem\r\n                            {...props}\r\n                            activeTintColor={params?.activeTintColor}\r\n                            inactiveTintColor={params?.inactiveTintColor}\r\n                            labelText={routeName}\r\n                            iconGroup={params?.iconGroup}\r\n                            iconName={params?.iconName}\r\n                            focusedIconName={params?.focusedIconName}\r\n                            onPress={() => navigateTo(routeName)}\r\n                            key={`route-${routeName}-${Math.random()}`}\r\n                            badgeText={badges[routeName] as string}\r\n                            style={{ marginLeft: (15 * depth) }}  // ToDo\r\n                        />\r\n                    )\r\n                })}\r\n            </DrawerContentScrollView>\r\n        </SafeAreaView>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}