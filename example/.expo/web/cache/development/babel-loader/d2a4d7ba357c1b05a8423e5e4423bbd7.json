{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\components\\\\TestPanel.tsx\";\n\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { DrawerContext } from \"../navigation/DrawerContext\";\nimport { Dynamic } from \"../screens/Dynamic\";\nimport { MessageBoxModal } from \"../modals/MessageBoxModal\";\nimport { InputBoxModal } from \"../modals/InputBoxModal\";\nexport default (function (_ref) {\n  var style = _ref.style,\n      navigation = _ref.navigation;\n\n  var _useContext = useContext(DrawerContext),\n      screens = _useContext.screens,\n      screenIndex = _useContext.screenIndex,\n      screensManager = _useContext.screensManager;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showMessageBoxModal = _useState2[0],\n      setShowLogoutModal = _useState2[1];\n\n  var _useState3 = useState({\n    title: '',\n    message: '',\n    askYesNo: false\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messageBoxState = _useState4[0],\n      setMessageBoxState = _useState4[1];\n\n  var getScreenConfig = function getScreenConfig() {\n    return {\n      label: 'Dynamic',\n      routeName: \"Dynamic \" + Math.floor(Math.random() * 10000),\n      component: Dynamic,\n      initialParams: {\n        activeTintColor: '#123',\n        inactiveTintColor: '#000',\n        iconGroup: 'antdesign',\n        iconName: 'paperclip',\n        focusedIconName: 'bug-outline'\n      }\n    };\n  };\n\n  var showMessageBox = function showMessageBox(title, message) {\n    var askYesNo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var confirm = arguments.length > 3 ? arguments[3] : undefined;\n    setMessageBoxState({\n      title: title,\n      message: message,\n      askYesNo: askYesNo,\n      confirm: confirm\n    });\n    setShowLogoutModal(true);\n  };\n\n  var showInputBox = function showInputBox() {};\n\n  return React.createElement(React.Fragment, null, React.createElement(MessageBoxModal, {\n    title: messageBoxState.title,\n    message: messageBoxState.message,\n    shown: showMessageBoxModal,\n    askYesNo: messageBoxState.askYesNo,\n    confirm: messageBoxState.confirm,\n    dismiss: function dismiss() {\n      return setShowLogoutModal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), React.createElement(InputBoxModal, {\n    title: messageBoxState.title,\n    message: messageBoxState.message,\n    shown: showMessageBoxModal,\n    askYesNo: messageBoxState.askYesNo,\n    confirm: messageBoxState.confirm ? messageBoxState.confirm : function () {\n      return undefined;\n    },\n    dismiss: function dismiss() {\n      return setShowLogoutModal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: [{\n      flex: 1\n    }, style],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Open Drawer\",\n    onPress: function onPress(d) {\n      navigation.openDrawer();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Back\",\n    onPress: function onPress(d) {\n      if (navigation.canGoBack()) navigation.goBack();else showMessageBox('Failed', 'There is no history to go back to!');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Delete the Playground Screen\",\n    onPress: function onPress() {\n      var found = false;\n      screens.forEach(function (screen, index) {\n        if (screensManager && screen.routeName === 'Playground') {\n          found = true;\n          screensManager('remove', index);\n          showMessageBox('Completed', 'Removed playground screen');\n        }\n      });\n\n      if (!found) {\n        showMessageBox('Failed', 'There is no playground screen');\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Delete this Screen\",\n    onPress: function onPress() {\n      if (screensManager && typeof screenIndex === 'number' && screenIndex >= 0) {\n        var name = screens[screenIndex].routeName;\n        showMessageBox('Confirmation', \"Are you sure you want to remove \" + name + \"?\", true, function () {\n          return screensManager('remove', screenIndex);\n        });\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Add a Dynamic\",\n    onPress: function onPress() {\n      var screenConfig = getScreenConfig();\n\n      if (screensManager) {\n        screensManager('append', 0, screenConfig);\n        showMessageBox('Completed', \"Added a new dynamic screen called '\" + screenConfig.label + \"' with a routeName of '\" + screenConfig.routeName + \"'\");\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }))));\n});","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/components/TestPanel.tsx"],"names":["React","useContext","useState","DrawerContext","Dynamic","MessageBoxModal","InputBoxModal","style","navigation","screens","screenIndex","screensManager","showMessageBoxModal","setShowLogoutModal","title","message","askYesNo","messageBoxState","setMessageBoxState","getScreenConfig","label","routeName","Math","floor","random","component","initialParams","activeTintColor","inactiveTintColor","iconGroup","iconName","focusedIconName","showMessageBox","confirm","showInputBox","undefined","flex","d","openDrawer","canGoBack","goBack","found","forEach","screen","index","name","screenConfig"],"mappings":"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","sourcesContent":["import { DrawerNavigationProp } from '@react-navigation/drawer'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Button } from 'react-native'\r\nimport { DrawerContext } from '../navigation/DrawerContext'\r\nimport { Dynamic } from '../screens/Dynamic'\r\nimport { MessageBoxModal } from '../modals/MessageBoxModal'\r\nimport { InputBoxModal } from '../modals/InputBoxModal'\r\nimport { NavigationElement } from '../navigation/NavigationTypes'\r\n\r\ninterface Props {\r\n    style?: object,\r\n    navigation: DrawerNavigationProp<any>,\r\n}\r\n\r\ntype MessageBoxState = {\r\n    title: string,\r\n    message: string,\r\n    askYesNo: boolean,\r\n    confirm?: () => void\r\n}\r\n\r\nexport default ({ style, navigation }: Props) => {\r\n    const { screens, screenIndex, screensManager } = useContext(DrawerContext)\r\n    const [showMessageBoxModal, setShowLogoutModal] = useState(false)\r\n    const [messageBoxState, setMessageBoxState] = useState<MessageBoxState>({\r\n        title: '',\r\n        message: '',\r\n        askYesNo: false,\r\n    })\r\n\r\n    const getScreenConfig = () => {\r\n        return (\r\n            {\r\n                // Names here needs to be unique for routing to work\r\n                label: 'Dynamic',\r\n                routeName: `Dynamic ${(Math.floor(Math.random() * 10000))}`,\r\n                component: Dynamic,\r\n                initialParams: {\r\n                    activeTintColor: '#123',\r\n                    inactiveTintColor: '#000',\r\n                    iconGroup: 'antdesign',\r\n                    iconName: 'paperclip',\r\n                    focusedIconName: 'bug-outline'\r\n                }\r\n            } as NavigationElement\r\n        )\r\n    }\r\n\r\n    const showMessageBox = (title: string, message: string, askYesNo: boolean = false, confirm?: () => void) => {\r\n        setMessageBoxState({ title, message, askYesNo, confirm })\r\n        setShowLogoutModal(true)\r\n    }\r\n\r\n    const showInputBox = () => {\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MessageBoxModal\r\n                title={messageBoxState.title}\r\n                message={messageBoxState.message}\r\n                shown={showMessageBoxModal}\r\n                askYesNo={messageBoxState.askYesNo}\r\n                confirm={messageBoxState.confirm}\r\n                dismiss={() => setShowLogoutModal(false)}\r\n            />\r\n            <InputBoxModal\r\n                title={messageBoxState.title}\r\n                message={messageBoxState.message}\r\n                shown={showMessageBoxModal}\r\n                askYesNo={messageBoxState.askYesNo}\r\n                confirm={messageBoxState.confirm ? messageBoxState.confirm : () => undefined}\r\n                dismiss={() => setShowLogoutModal(false)}\r\n            />\r\n            <View style={[{ flex: 1 }, style]}>\r\n                <View>\r\n                    <Button\r\n                        title='Open Drawer'\r\n                        onPress={(d) => {\r\n                            navigation.openDrawer()\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View>\r\n                    <Button\r\n                        title='Back'\r\n                        onPress={(d) => {\r\n                            if (navigation.canGoBack())\r\n                                navigation.goBack()\r\n                            else\r\n                                showMessageBox('Failed', 'There is no history to go back to!')\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View>\r\n                    <Button\r\n                        title='Delete the Playground Screen'\r\n                        onPress={() => {\r\n                            let found = false\r\n                            screens.forEach((screen, index) => {\r\n                                if (screensManager && screen.routeName === 'Playground') {\r\n                                    found = true\r\n                                    screensManager('remove', index)\r\n                                    showMessageBox('Completed', 'Removed playground screen')\r\n                                }\r\n                            })\r\n                            if (!found) {\r\n                                showMessageBox('Failed', 'There is no playground screen')\r\n                            }\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View>\r\n                    <Button\r\n                        title='Delete this Screen'\r\n                        onPress={() => {\r\n                            if (screensManager && typeof screenIndex === 'number' && screenIndex >= 0) {\r\n                                const name = screens[screenIndex].routeName\r\n                                showMessageBox(\r\n                                    'Confirmation',\r\n                                    `Are you sure you want to remove ${name}?`,\r\n                                    true, () => screensManager('remove', screenIndex)\r\n                                )\r\n                            }\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View>\r\n                    <Button\r\n                        title='Add a Dynamic'\r\n                        onPress={() => {\r\n                            const screenConfig = getScreenConfig()\r\n                            if (screensManager) {\r\n                                screensManager('append', 0, screenConfig)\r\n                                showMessageBox('Completed', `Added a new dynamic screen called '${screenConfig.label}' with a routeName of '${screenConfig.routeName}'`)\r\n                            }\r\n                        }}\r\n                    />\r\n                </View>\r\n            </View>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}