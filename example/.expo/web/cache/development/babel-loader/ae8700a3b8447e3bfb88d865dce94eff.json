{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\components\\\\NavigationControls.tsx\";\n\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { DrawerContext } from \"../navigation/DrawerContext\";\nimport { Dynamic } from \"../screens/Dynamic\";\nimport { MessageBoxModal } from \"../modals/MessageBox\";\nexport default (function (_ref) {\n  var style = _ref.style,\n      navigation = _ref.navigation;\n\n  var _useContext = useContext(DrawerContext),\n      screens = _useContext.screens,\n      screenIndex = _useContext.screenIndex,\n      screensManager = _useContext.screensManager;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showMessageBoxModal = _useState2[0],\n      setShowLogoutModal = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messageBoxTitle = _useState4[0],\n      setMessageBoxTitle = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messageBoxMessage = _useState6[0],\n      setMessageBoxMessage = _useState6[1];\n\n  var getScreenConfig = function getScreenConfig() {\n    return {\n      name: \"Dynamic \" + Math.floor(Math.random() * 10000),\n      component: Dynamic,\n      initialParams: {\n        activeTintColor: '#123',\n        inactiveTintColor: '#000',\n        iconGroup: 'antdesign',\n        iconName: 'paperclip',\n        focusedIconName: 'bug-outline'\n      }\n    };\n  };\n\n  var showMessageBox = function showMessageBox(title, message) {\n    setMessageBoxTitle(title);\n    setMessageBoxMessage(message);\n    setShowLogoutModal(true);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(MessageBoxModal, {\n    title: messageBoxTitle,\n    message: messageBoxMessage,\n    shown: showMessageBoxModal,\n    dismiss: function dismiss() {\n      return setShowLogoutModal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: [{\n      flex: 1\n    }, style],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    title: \"Open Drawer\",\n    onPress: function onPress(d) {\n      navigation.openDrawer();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Back\",\n    onPress: function onPress(d) {\n      navigation.goBack();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Delete the Playground Screen\",\n    onPress: function onPress() {\n      var found = false;\n      screens.forEach(function (screen, index) {\n        if (screensManager && screen.name === 'Playground') {\n          found = true;\n          screensManager('remove', index);\n          showMessageBox('Completed', 'Removed Playground');\n        }\n      });\n\n      if (!found) {\n        showMessageBox('Failed', 'There is no playground screen');\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Delete this Screen\",\n    onPress: function onPress() {\n      if (screensManager && typeof screenIndex === 'number' && screenIndex >= 0) {\n        var name = screens[screenIndex].name;\n        screensManager('remove', screenIndex);\n        showMessageBox('Completed', \"Removed \" + name);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Add a Dynamic\",\n    onPress: function onPress() {\n      if (screensManager) {\n        screensManager('append', 0, getScreenConfig());\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })));\n});","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/components/NavigationControls.tsx"],"names":["React","useContext","useState","DrawerContext","Dynamic","MessageBoxModal","style","navigation","screens","screenIndex","screensManager","showMessageBoxModal","setShowLogoutModal","messageBoxTitle","setMessageBoxTitle","messageBoxMessage","setMessageBoxMessage","getScreenConfig","name","Math","floor","random","component","initialParams","activeTintColor","inactiveTintColor","iconGroup","iconName","focusedIconName","showMessageBox","title","message","flex","d","openDrawer","goBack","found","forEach","screen","index"],"mappings":"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","sourcesContent":["import { DrawerNavigationProp } from '@react-navigation/drawer'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Button } from 'react-native'\r\nimport { DrawerContext } from '../navigation/DrawerContext'\r\nimport { Dynamic } from '../screens/Dynamic'\r\nimport { MessageBoxModal } from '../modals/MessageBox'\r\n\r\ninterface Props {\r\n    style?: object,\r\n    navigation: DrawerNavigationProp<any>,\r\n}\r\n\r\nexport default ({ style, navigation }: Props) => {\r\n    const { screens, screenIndex, screensManager } = useContext(DrawerContext)\r\n    const [showMessageBoxModal, setShowLogoutModal] = useState(false)\r\n    const [messageBoxTitle, setMessageBoxTitle] = useState('')\r\n    const [messageBoxMessage, setMessageBoxMessage] = useState('')\r\n\r\n    const getScreenConfig = () => {\r\n        return (\r\n            {\r\n                // Names here needs to be unique for routing to work\r\n                name: `Dynamic ${(Math.floor(Math.random() * 10000))}`,\r\n                component: Dynamic,\r\n                initialParams: {\r\n                    activeTintColor: '#123',\r\n                    inactiveTintColor: '#000',\r\n                    iconGroup: 'antdesign',\r\n                    iconName: 'paperclip',\r\n                    focusedIconName: 'bug-outline'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const showMessageBox = (title: string, message: string) => {\r\n        setMessageBoxTitle(title)\r\n        setMessageBoxMessage(message)\r\n        setShowLogoutModal(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MessageBoxModal\r\n                title={messageBoxTitle}\r\n                message={messageBoxMessage}\r\n                shown={showMessageBoxModal}                \r\n                dismiss={() => setShowLogoutModal(false)}\r\n            />\r\n            <View style={[{ flex: 1 }, style]}>\r\n                <Button\r\n                    title='Open Drawer'\r\n                    onPress={(d) => {\r\n                        navigation.openDrawer()\r\n                    }}\r\n                />\r\n                <Button\r\n                    title='Back'\r\n                    onPress={(d) => {\r\n                        navigation.goBack()\r\n                    }}\r\n                />\r\n                <Button\r\n                    title='Delete the Playground Screen'\r\n                    onPress={() => {\r\n                        let found = false\r\n                        screens.forEach((screen, index) => {\r\n                            if (screensManager && screen.name === 'Playground') {\r\n                                found = true\r\n                                screensManager('remove', index)\r\n                                showMessageBox('Completed', 'Removed Playground')\r\n                            }\r\n                        })\r\n                        if (!found) {\r\n                            showMessageBox('Failed', 'There is no playground screen')\r\n                        }\r\n                    }}\r\n                />\r\n                <Button\r\n                    title='Delete this Screen'\r\n                    onPress={() => {\r\n                        if (screensManager && typeof screenIndex === 'number' && screenIndex >= 0) {\r\n                            const name = screens[screenIndex].name\r\n                            screensManager('remove', screenIndex)\r\n                            showMessageBox('Completed', `Removed ${name}`)\r\n                        }\r\n                    }}\r\n                />\r\n                <Button\r\n                    title='Add a Dynamic'\r\n                    onPress={() => {\r\n                        if (screensManager) {\r\n                            screensManager('append', 0, getScreenConfig())\r\n                        }\r\n                    }}\r\n                />\r\n            </View>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}