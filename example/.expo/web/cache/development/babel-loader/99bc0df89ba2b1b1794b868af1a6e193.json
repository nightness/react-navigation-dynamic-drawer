{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\navigation\\\\DrawerNavigator.tsx\";\n\nimport 'react-native-gesture-handler';\nimport React, { useReducer } from 'react';\nimport Collapsible from 'react-native-collapsible';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { DrawerProvider } from \"../navigation/DrawerContext\";\nimport { DrawerContent } from \"./DrawerContent\";\nimport { RoutingReducer } from \"./RoutingReducer\";\nvar Drawer = createDrawerNavigator();\nexport default (function (_ref) {\n  var initialScreens = _ref.initialScreens,\n      restProps = _objectWithoutProperties(_ref, [\"initialScreens\"]);\n\n  var _useReducer = useReducer(RoutingReducer, initialScreens),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      screens = _useReducer2[0],\n      screensDispatch = _useReducer2[1];\n\n  var ScreenNode = function ScreenNode(_ref2) {\n    var screens = _ref2.screens,\n        _ref2$depth = _ref2.depth,\n        depth = _ref2$depth === void 0 ? 0 : _ref2$depth;\n    if (depth > 15) throw new Error('ScreenNode: Maximum Depth Reached');\n    return React.createElement(React.Fragment, null, screens.map(function (screen) {\n      return React.createElement(React.Fragment, null, React.createElement(Drawer.Screen, {\n        name: screen.name,\n        component: screen.component,\n        initialParams: screen.initialParams,\n        key: \"screen-\" + screen.name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }\n      }), screen.children ? React.createElement(Collapsible, {\n        collapsed: !!screen.childrenCollapsed,\n        collapsedHeight: 0,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 33\n        }\n      }, React.createElement(ScreenNode, {\n        screens: screen.children,\n        depth: depth + 1,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 37\n        }\n      })) : React.createElement(React.Fragment, null));\n    }));\n  };\n\n  return React.createElement(DrawerProvider, {\n    screens: screens,\n    screensDispatch: screensDispatch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, React.createElement(Drawer.Navigator, _extends({}, restProps, {\n    drawerContent: function drawerContent(props) {\n      return React.createElement(DrawerContent, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 41\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), React.createElement(ScreenNode, {\n    screens: screens,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  })));\n});","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/navigation/DrawerNavigator.tsx"],"names":["React","useReducer","Collapsible","createDrawerNavigator","DrawerProvider","DrawerContent","RoutingReducer","Drawer","initialScreens","restProps","screens","screensDispatch","ScreenNode","depth","Error","map","screen","name","component","initialParams","children","childrenCollapsed","props"],"mappings":";;;;;;;AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,IAA4BC,UAA5B,QAA8C,OAA9C;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,cAAT;AACA,SAASC,aAAT;AACA,SAASC,cAAT;AAIA,IAAMC,MAAM,GAAGJ,qBAAqB,EAApC;AAOA,gBAAe,gBAA6C;AAAA,MAA1CK,cAA0C,QAA1CA,cAA0C;AAAA,MAAvBC,SAAuB;;AAAA,oBAErBR,UAAU,CAACK,cAAD,EAAiBE,cAAjB,CAFW;AAAA;AAAA,MAEjDE,OAFiD;AAAA,MAExCC,eAFwC;;AASxD,MAAMC,UAAU,GAAG,SAAbA,UAAa,QAAuC;AAAA,QAApCF,OAAoC,SAApCA,OAAoC;AAAA,4BAA3BG,KAA2B;AAAA,QAA3BA,KAA2B,4BAAnB,CAAmB;AACtD,QAAIA,KAAK,GAAG,EAAZ,EACI,MAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACJ,WACI,0CACIJ,OAAO,CAACK,GAAR,CAAY,UAACC,MAAD,EAAY;AACpB,aACI,0CACI,oBAAC,MAAD,CAAQ,MAAR;AACI,QAAA,IAAI,EAAEA,MAAM,CAACC,IADjB;AAEI,QAAA,SAAS,EAAED,MAAM,CAACE,SAFtB;AAGI,QAAA,aAAa,EAAEF,MAAM,CAACG,aAH1B;AAII,QAAA,GAAG,cAAYH,MAAM,CAACC,IAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAMKD,MAAM,CAACI,QAAP,GACG,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAE,CAAC,CAACJ,MAAM,CAACK,iBAAjC;AAAoD,QAAA,eAAe,EAAE,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAEL,MAAM,CAACI,QAA5B;AAAsC,QAAA,KAAK,EAAEP,KAAK,GAAG,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADH,GAGoB,yCATzB,CADJ;AAcH,KAfD,CADJ,CADJ;AAoBH,GAvBD;;AA0BA,SACI,oBAAC,cAAD;AAAgB,IAAA,OAAO,EAAEH,OAAzB;AAAkC,IAAA,eAAe,EAAEC,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD,CAAQ,SAAR,eACQF,SADR;AAEI,IAAA,aAAa,EAAE,uBAAAa,KAAK;AAAA,aAAI,oBAAC,aAAD,eAAmBA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA,KAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAII,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEZ,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,CADJ;AAUH,CA7CD","sourcesContent":["import 'react-native-gesture-handler'\r\nimport React, { useContext, useReducer } from 'react'\r\nimport Collapsible from 'react-native-collapsible'\r\nimport { createDrawerNavigator } from '@react-navigation/drawer'\r\nimport { DrawerProvider } from '../navigation/DrawerContext'\r\nimport { DrawerContent } from './DrawerContent'\r\nimport { RoutingReducer } from './RoutingReducer'\r\nimport { NavigationElements } from './NavigationTypes'\r\nimport { StyleProp, ViewStyle } from 'react-native'\r\n\r\nconst Drawer = createDrawerNavigator()\r\n\r\ninterface Props {\r\n    initialScreens: NavigationElements,\r\n    drawerStyle?: StyleProp<ViewStyle>\r\n}\r\n\r\nexport default ({ initialScreens, ...restProps }: Props) => {\r\n    // The stateful list of screens\r\n    const [screens, screensDispatch] = useReducer(RoutingReducer, initialScreens)\r\n\r\n    interface NodeProps {\r\n        screens: NavigationElements,\r\n        depth?: number\r\n    }\r\n\r\n    const ScreenNode = ({ screens, depth = 0 }: NodeProps) => {\r\n        if (depth > 15)\r\n            throw new Error('ScreenNode: Maximum Depth Reached')\r\n        return (\r\n            <>{\r\n                screens.map((screen) => {\r\n                    return (\r\n                        <>\r\n                            <Drawer.Screen\r\n                                name={screen.name}\r\n                                component={screen.component}\r\n                                initialParams={screen.initialParams}\r\n                                key={`screen-${screen.name}`} />\r\n                            {screen.children ?\r\n                                <Collapsible collapsed={!!screen.childrenCollapsed} collapsedHeight={0}>\r\n                                    <ScreenNode screens={screen.children} depth={depth + 1} />\r\n                                </Collapsible> : <></>\r\n                            }\r\n                        </>\r\n                    )\r\n                })\r\n            }</>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <DrawerProvider screens={screens} screensDispatch={screensDispatch}>\r\n            <Drawer.Navigator \r\n                {...restProps}\r\n                drawerContent={props => <DrawerContent {...props} />}\r\n            >\r\n                <ScreenNode screens={screens} />\r\n            </Drawer.Navigator>\r\n        </DrawerProvider>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}