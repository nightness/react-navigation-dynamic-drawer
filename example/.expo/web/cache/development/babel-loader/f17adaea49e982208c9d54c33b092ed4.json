{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\navigation\\\\DrawerContext.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useState } from 'react';\nexport var DrawerContext = createContext({\n  badges: {},\n  screens: [],\n  setBadge: function setBadge(routeName, value) {\n    return undefined;\n  },\n  setDrawerContent: function setDrawerContent(navigation, state) {\n    return undefined;\n  }\n});\nexport var DrawerProvider = function DrawerProvider(_ref) {\n  var children = _ref.children,\n      screens = _ref.screens,\n      screensDispatch = _ref.screensDispatch;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      badges = _useState2[0],\n      setBadges = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hamburgerBadge = _useState4[0],\n      sethamburgerBadge = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      navigation = _useState6[0],\n      setNavigation = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      state = _useState8[0],\n      setState = _useState8[1];\n\n  var screenIndex = state ? state.index : -1;\n\n  var setBadge = function setBadge(routeName, value) {\n    var newState = _objectSpread({}, badges);\n\n    newState[routeName] = value;\n    setBadges(newState);\n  };\n\n  var setDrawerContent = function setDrawerContent(currentNavigation, state) {\n    if (currentNavigation != navigation) setNavigation(currentNavigation);\n    setState(state);\n  };\n\n  var screensManager = function screensManager(type, index, screen) {\n    if (type === 'remove' && index === screenIndex && navigation && navigation.canGoBack()) navigation.goBack();\n    screensDispatch({\n      type: type,\n      index: index,\n      screen: screen\n    });\n    return true;\n  };\n\n  return React.createElement(DrawerContext.Provider, {\n    value: {\n      badges: badges,\n      setBadge: setBadge,\n      navigation: navigation,\n      state: state,\n      screenIndex: screenIndex,\n      screens: screens,\n      screensManager: screensManager,\n      setDrawerContent: setDrawerContent\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/navigation/DrawerContext.tsx"],"names":["React","createContext","useState","DrawerContext","badges","screens","setBadge","routeName","value","undefined","setDrawerContent","navigation","state","DrawerProvider","children","screensDispatch","setBadges","hamburgerBadge","sethamburgerBadge","setNavigation","setState","screenIndex","index","newState","currentNavigation","screensManager","type","screen","canGoBack","goBack"],"mappings":";;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAeA,OAAO,IAAMC,aAAa,GAAGF,aAAa,CAAc;AACpDG,EAAAA,MAAM,EAAE,EAD4C;AAEpDC,EAAAA,OAAO,EAAE,EAF2C;AAGpDC,EAAAA,QAAQ,EAAE,kBAACC,SAAD,EAAoBC,KAApB;AAAA,WAAsCC,SAAtC;AAAA,GAH0C;AAIpDC,EAAAA,gBAAgB,EAAE,0BAACC,UAAD,EAAqCC,KAArC;AAAA,WAAqFH,SAArF;AAAA;AAJkC,CAAd,CAAnC;AAaP,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,OAAmD;AAAA,MAAhDC,QAAgD,QAAhDA,QAAgD;AAAA,MAAtCT,OAAsC,QAAtCA,OAAsC;AAAA,MAA7BU,eAA6B,QAA7BA,eAA6B;;AAAA,kBACjDb,QAAQ,CAAS,EAAT,CADyC;AAAA;AAAA,MACtEE,MADsE;AAAA,MAC9DY,SAD8D;;AAAA,mBAEjCd,QAAQ,EAFyB;AAAA;AAAA,MAEtEe,cAFsE;AAAA,MAEtDC,iBAFsD;;AAAA,mBAGzChB,QAAQ,EAHiC;AAAA;AAAA,MAGtES,UAHsE;AAAA,MAG1DQ,aAH0D;;AAAA,mBAInDjB,QAAQ,EAJ2C;AAAA;AAAA,MAItEU,KAJsE;AAAA,MAI/DQ,QAJ+D;;AAK7E,MAAMC,WAAW,GAAGT,KAAK,GAAGA,KAAK,CAACU,KAAT,GAAiB,CAAC,CAA3C;;AAEA,MAAMhB,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAoBC,KAApB,EAA4C;AACzD,QAAIe,QAAQ,qBAAOnB,MAAP,CAAZ;;AACAmB,IAAAA,QAAQ,CAAChB,SAAD,CAAR,GAAsBC,KAAtB;AACAQ,IAAAA,SAAS,CAACO,QAAD,CAAT;AACH,GAJD;;AAMA,MAAMb,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACc,iBAAD,EAA4CZ,KAA5C,EAA4F;AACjH,QAAIY,iBAAiB,IAAIb,UAAzB,EACIQ,aAAa,CAACK,iBAAD,CAAb;AACJJ,IAAAA,QAAQ,CAACR,KAAD,CAAR;AACH,GAJD;;AAMA,MAAMa,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAsBJ,KAAtB,EAAqCK,MAArC,EAAoE;AAEvF,QAAID,IAAI,KAAK,QAAT,IAAqBJ,KAAK,KAAKD,WAA/B,IAA8CV,UAA9C,IAA4DA,UAAU,CAACiB,SAAX,EAAhE,EACIjB,UAAU,CAACkB,MAAX;AACJd,IAAAA,eAAe,CAAC;AAAEW,MAAAA,IAAI,EAAJA,IAAF;AAAQJ,MAAAA,KAAK,EAALA,KAAR;AAAeK,MAAAA,MAAM,EAANA;AAAf,KAAD,CAAf;AACA,WAAO,IAAP;AACH,GAND;;AAQA,SACI,oBAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHvB,MAAAA,MAAM,EAANA,MADG;AAEHE,MAAAA,QAAQ,EAARA,QAFG;AAGHK,MAAAA,UAAU,EAAVA,UAHG;AAIHC,MAAAA,KAAK,EAALA,KAJG;AAKHS,MAAAA,WAAW,EAAXA,WALG;AAMHhB,MAAAA,OAAO,EAAPA,OANG;AAOHoB,MAAAA,cAAc,EAAdA,cAPG;AAQHf,MAAAA,gBAAgB,EAAhBA;AARG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYKI,QAZL,CADJ;AAgBH,CA3CM","sourcesContent":["import { DrawerNavigationState, NavigationHelpers, ParamListBase } from '@react-navigation/native'\r\nimport React, { createContext, useState } from 'react'\r\nimport { Badges, NavigationElements, NavigationElement } from './NavigationTypes'\r\nimport { ScreenActions } from './RoutingReducer'\r\n\r\ntype ContextType = {\r\n    badges: Badges,\r\n    setBadge: (routeName: string, value: string) => void,\r\n    screens: NavigationElements,\r\n    screensManager?: (action: ScreenActions, index: number, screen?: NavigationElement) => boolean,\r\n    navigation?: NavigationHelpers<any>,\r\n    state?: DrawerNavigationState<ParamListBase>,\r\n    screenIndex?: number,\r\n    setDrawerContent: (navigation: NavigationHelpers<any>, state: DrawerNavigationState<ParamListBase>) => void,\r\n}\r\n\r\nexport const DrawerContext = createContext<ContextType>({\r\n    badges: {},\r\n    screens: [],\r\n    setBadge: (routeName: string, value: string) => undefined,\r\n    setDrawerContent: (navigation: NavigationHelpers<any>, state: DrawerNavigationState<ParamListBase>) => undefined\r\n})\r\n\r\ninterface Props {\r\n    children: JSX.Element | JSX.Element[],\r\n    screens: NavigationElements,\r\n    screensDispatch: React.Dispatch<any>,\r\n}\r\n\r\nexport const DrawerProvider = ({ children, screens, screensDispatch }: Props) => {\r\n    const [badges, setBadges] = useState<Badges>({})\r\n    const [hamburgerBadge, sethamburgerBadge] = useState<string>()\r\n    const [navigation, setNavigation] = useState<NavigationHelpers<any>>()\r\n    const [state, setState] = useState<DrawerNavigationState<ParamListBase>>()\r\n    const screenIndex = state ? state.index : -1\r\n    \r\n    const setBadge = (routeName: string, value: string): void => {\r\n        let newState = {...badges}\r\n        newState[routeName] = value\r\n        setBadges(newState)\r\n    }\r\n\r\n    const setDrawerContent = (currentNavigation: NavigationHelpers<any>, state: DrawerNavigationState<ParamListBase>) => {\r\n        if (currentNavigation != navigation)\r\n            setNavigation(currentNavigation)\r\n        setState(state)\r\n    }\r\n\r\n    const screensManager = (type: ScreenActions, index: number, screen?: NavigationElement) => {\r\n        // If removing the current screen, go back in the history first, then remove\r\n        if (type === 'remove' && index === screenIndex && navigation && navigation.canGoBack())\r\n            navigation.goBack()\r\n        screensDispatch({ type, index, screen })\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <DrawerContext.Provider\r\n            value={{\r\n                badges,\r\n                setBadge,\r\n                navigation,\r\n                state,\r\n                screenIndex,\r\n                screens,\r\n                screensManager,\r\n                setDrawerContent\r\n            }}\r\n        >\r\n            {children}\r\n        </DrawerContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}