{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\components\\\\NavigationControls.tsx\";\n\nimport React, { useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { DrawerContext } from \"../navigation/DrawerContext\";\nimport { Dynamic } from \"../screens/Dynamic\";\nexport default (function (_ref) {\n  var style = _ref.style,\n      navigation = _ref.navigation;\n\n  var _useContext = useContext(DrawerContext),\n      screens = _useContext.screens,\n      screenIndex = _useContext.screenIndex,\n      screensManager = _useContext.screensManager;\n\n  var getScreenConfig = function getScreenConfig() {\n    return {\n      name: \"Dynamic \" + Math.floor(Math.random() * 10000),\n      component: Dynamic,\n      initialParams: {\n        activeTintColor: '#123',\n        inactiveTintColor: '#000',\n        iconGroup: 'antdesign',\n        iconName: 'paperclip',\n        focusedIconName: 'bug-outline'\n      }\n    };\n  };\n\n  return React.createElement(View, {\n    style: [{\n      flex: 1\n    }, style],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"Open Drawer\",\n    onPress: function onPress(d) {\n      navigation.openDrawer();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Back\",\n    onPress: function onPress(d) {\n      navigation.goBack();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Delete the Playground Screen\",\n    onPress: function onPress() {\n      screens.forEach(function (screen, index) {\n        if (screensManager && screen.name === 'Playground') {\n          screensManager('remove', index);\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Delete this Screen\",\n    onPress: function onPress() {\n      if (screensManager && typeof screenIndex === 'number' && screenIndex >= 0) {\n        screensManager('remove', screenIndex);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Add a Dynamic\",\n    onPress: function onPress() {\n      if (screensManager) {\n        screensManager('append', 0, getScreenConfig());\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }));\n});","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/components/NavigationControls.tsx"],"names":["React","useContext","DrawerContext","Dynamic","style","navigation","screens","screenIndex","screensManager","getScreenConfig","name","Math","floor","random","component","initialParams","activeTintColor","inactiveTintColor","iconGroup","iconName","focusedIconName","flex","d","openDrawer","goBack","forEach","screen","index"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;AAEA,SAASC,aAAT;AACA,SAASC,OAAT;AAOA,gBAAe,gBAAkC;AAAA,MAA/BC,KAA+B,QAA/BA,KAA+B;AAAA,MAAxBC,UAAwB,QAAxBA,UAAwB;;AAAA,oBACIJ,UAAU,CAACC,aAAD,CADd;AAAA,MACrCI,OADqC,eACrCA,OADqC;AAAA,MAC5BC,WAD4B,eAC5BA,WAD4B;AAAA,MACfC,cADe,eACfA,cADe;;AAG7C,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B,WACI;AAEIC,MAAAA,IAAI,eAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CAFtB;AAGIC,MAAAA,SAAS,EAAEX,OAHf;AAIIY,MAAAA,aAAa,EAAE;AACXC,QAAAA,eAAe,EAAE,MADN;AAEXC,QAAAA,iBAAiB,EAAE,MAFR;AAGXC,QAAAA,SAAS,EAAE,WAHA;AAIXC,QAAAA,QAAQ,EAAE,WAJC;AAKXC,QAAAA,eAAe,EAAE;AALN;AAJnB,KADJ;AAcH,GAfD;;AAiBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,EAAcjB,KAAd,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,aADV;AAEI,IAAA,OAAO,EAAE,iBAACkB,CAAD,EAAO;AACZjB,MAAAA,UAAU,CAACkB,UAAX;AACH,KAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,MADV;AAEI,IAAA,OAAO,EAAE,iBAACD,CAAD,EAAO;AACZjB,MAAAA,UAAU,CAACmB,MAAX;AACH,KAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAaI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,8BADV;AAEI,IAAA,OAAO,EAAE,mBAAM;AACXlB,MAAAA,OAAO,CAACmB,OAAR,CAAgB,UAACC,MAAD,EAASC,KAAT,EAAmB;AAC/B,YAAInB,cAAc,IAAIkB,MAAM,CAAChB,IAAP,KAAgB,YAAtC,EAAoD;AAChDF,UAAAA,cAAc,CAAC,QAAD,EAAWmB,KAAX,CAAd;AACH;AACJ,OAJD;AAKH,KARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,EAuBI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,oBADV;AAEI,IAAA,OAAO,EAAE,mBAAM;AACX,UAAInB,cAAc,IAAI,OAAOD,WAAP,KAAuB,QAAzC,IAAqDA,WAAW,IAAG,CAAvE,EAA0E;AACtEC,QAAAA,cAAc,CAAC,QAAD,EAAWD,WAAX,CAAd;AACH;AACJ,KANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBJ,EA+BI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,eADV;AAEI,IAAA,OAAO,EAAE,mBAAM;AACX,UAAIC,cAAJ,EAAoB;AAChBA,QAAAA,cAAc,CAAC,QAAD,EAAW,CAAX,EAAcC,eAAe,EAA7B,CAAd;AACH;AACJ,KANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BJ,CADJ;AA0CH,CA9DD","sourcesContent":["import { DrawerNavigationProp } from '@react-navigation/drawer'\r\nimport React, { useContext } from 'react'\r\nimport { View, Button } from 'react-native'\r\nimport { DrawerContext } from '../navigation/DrawerContext'\r\nimport { Dynamic } from '../screens/Dynamic'\r\n\r\ninterface Props {\r\n    style?: object,\r\n    navigation: DrawerNavigationProp<any>,\r\n}\r\n\r\nexport default ({ style, navigation }: Props) => {\r\n    const { screens, screenIndex, screensManager } = useContext(DrawerContext)\r\n\r\n    const getScreenConfig = () => {\r\n        return (\r\n            {\r\n                // Names here needs to be unique for routing to work\r\n                name: `Dynamic ${(Math.floor(Math.random() * 10000))}`,\r\n                component: Dynamic,\r\n                initialParams: {\r\n                    activeTintColor: '#123',\r\n                    inactiveTintColor: '#000',\r\n                    iconGroup: 'antdesign',\r\n                    iconName: 'paperclip',\r\n                    focusedIconName: 'bug-outline'\r\n                }\r\n            }            \r\n        )\r\n    }\r\n        \r\n    return (\r\n        <View style={[{ flex: 1 }, style]}>\r\n            <Button\r\n                title='Open Drawer'\r\n                onPress={(d) => {\r\n                    navigation.openDrawer()\r\n                }}\r\n            />\r\n            <Button\r\n                title='Back'\r\n                onPress={(d) => {\r\n                    navigation.goBack()\r\n                }}\r\n            />\r\n            <Button\r\n                title='Delete the Playground Screen'\r\n                onPress={() => {\r\n                    screens.forEach((screen, index) => {\r\n                        if (screensManager && screen.name === 'Playground') {\r\n                            screensManager('remove', index)\r\n                        }                            \r\n                    })\r\n                }}\r\n            />\r\n            <Button\r\n                title='Delete this Screen'\r\n                onPress={() => {\r\n                    if (screensManager && typeof screenIndex === 'number' && screenIndex >=0) {\r\n                        screensManager('remove', screenIndex)\r\n                    }\r\n                }}\r\n            />            \r\n            <Button\r\n                title='Add a Dynamic'\r\n                onPress={() => {\r\n                    if (screensManager) {\r\n                        screensManager('append', 0, getScreenConfig())\r\n                    }\r\n                }}\r\n            />\r\n        </View>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}