{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\components\\\\TestPanel.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { DrawerContext } from \"../navigation/DrawerContext\";\nimport { Dynamic } from \"../screens/Dynamic\";\nimport { MessageBoxModal } from \"../modals/MessageBoxModal\";\nimport { InputBoxModal } from \"../modals/InputBoxModal\";\nexport default (function (_ref) {\n  var style = _ref.style,\n      navigation = _ref.navigation;\n\n  var _useContext = useContext(DrawerContext),\n      screens = _useContext.screens,\n      screenIndex = _useContext.screenIndex,\n      ScreenManager = _useContext.ScreenManager,\n      setHamburgerBadge = _useContext.setHamburgerBadge;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showInputBoxModal = _useState2[0],\n      setShowInputBoxModal = _useState2[1];\n\n  var _useState3 = useState({\n    title: '',\n    message: '',\n    value: '',\n    askYesNo: false\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputBoxState = _useState4[0],\n      setInputBoxState = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showMessageBoxModal = _useState6[0],\n      setShowMessageBoxModal = _useState6[1];\n\n  var _useState7 = useState({\n    title: '',\n    message: '',\n    askYesNo: false\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      messageBoxState = _useState8[0],\n      setMessageBoxState = _useState8[1];\n\n  var getScreenConfig = function getScreenConfig() {\n    return {\n      label: 'Dynamic',\n      routeName: \"Dynamic \" + Math.floor(Math.random() * 10000),\n      component: Dynamic,\n      initialParams: {\n        activeTintColor: '#123',\n        inactiveTintColor: '#000',\n        iconGroup: 'antdesign',\n        iconName: 'paperclip',\n        focusedIconName: 'bug-outline'\n      },\n      depth: 0\n    };\n  };\n\n  var showMessageBox = function showMessageBox(title, message) {\n    var askYesNo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var confirm = arguments.length > 3 ? arguments[3] : undefined;\n    setMessageBoxState({\n      title: title,\n      message: message,\n      askYesNo: askYesNo,\n      confirm: confirm\n    });\n    setShowMessageBoxModal(true);\n  };\n\n  var showInputBox = function showInputBox(title, message, value) {\n    var askYesNo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var confirm = arguments.length > 4 ? arguments[4] : undefined;\n    setInputBoxState({\n      title: title,\n      message: message,\n      askYesNo: askYesNo,\n      value: value,\n      confirm: confirm\n    });\n    setShowInputBoxModal(true);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(MessageBoxModal, {\n    title: messageBoxState.title,\n    message: messageBoxState.message,\n    shown: showMessageBoxModal,\n    askYesNo: messageBoxState.askYesNo,\n    confirm: messageBoxState.confirm,\n    dismiss: function dismiss() {\n      return setShowMessageBoxModal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), React.createElement(InputBoxModal, {\n    title: inputBoxState.title,\n    message: inputBoxState.message,\n    value: inputBoxState.value,\n    shown: showInputBoxModal,\n    askYesNo: inputBoxState.askYesNo,\n    onChangeText: function onChangeText(text) {\n      inputBoxState.value = text;\n      setInputBoxState(_objectSpread({}, inputBoxState));\n    },\n    confirm: function confirm() {\n      inputBoxState.confirm == null ? void 0 : inputBoxState.confirm(inputBoxState.value);\n      setShowInputBoxModal(false);\n    },\n    dismiss: function dismiss() {\n      return setShowInputBoxModal(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: style,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      margin: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Open Drawer\",\n    onPress: function onPress(d) {\n      navigation.openDrawer();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: {\n      margin: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Back\",\n    onPress: function onPress(d) {\n      if (navigation.canGoBack()) navigation.goBack();else showMessageBox('Failed', 'There is no history to go back to!');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: {\n      margin: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Delete the Playground Screen\",\n    onPress: function onPress() {\n      var found = false;\n      screens.forEach(function (screen, index) {\n        if (ScreenManager != null && ScreenManager.reducer && screen.routeName === 'Playground') {\n          found = true;\n          ScreenManager.reducer('remove', index);\n          showMessageBox('Completed', 'Removed playground screen');\n        }\n      });\n\n      if (!found) {\n        showMessageBox('Failed', 'There is no playground screen');\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: {\n      margin: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Delete this Screen\",\n    onPress: function onPress() {\n      if (ScreenManager != null && ScreenManager.reducer && typeof screenIndex === 'number' && screenIndex >= 0) {\n        var name = screens[screenIndex].routeName;\n        showMessageBox('Confirmation', \"Are you sure you want to remove \" + name + \"?\", true, function () {\n          return ScreenManager.reducer('remove', screenIndex);\n        });\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: {\n      margin: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Add a Dynamic\",\n    onPress: function onPress() {\n      var screenConfig = getScreenConfig();\n\n      if (ScreenManager != null && ScreenManager.reducer) {\n        ScreenManager.reducer('append', 0, screenConfig);\n        showMessageBox('Completed', \"Added a new dynamic screen called '\" + screenConfig.label + \"' with a routeName of '\" + screenConfig.routeName + \"'\");\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: {\n      margin: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Add a Dynamic child to this screen\",\n    onPress: function onPress() {\n      var screenConfig = getScreenConfig();\n\n      if (ScreenManager != null && ScreenManager.reducer) {\n        showMessageBox('ToDo', 'ToDo');\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: {\n      margin: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, React.createElement(Button, {\n    title: \"Set Hamburger Badge\",\n    onPress: function onPress() {\n      showInputBox('Set Hamburger Badge', 'Text', '', false, function (text) {\n        setHamburgerBadge == null ? void 0 : setHamburgerBadge(text);\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }))));\n});","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/components/TestPanel.tsx"],"names":["React","useContext","useState","DrawerContext","Dynamic","MessageBoxModal","InputBoxModal","style","navigation","screens","screenIndex","ScreenManager","setHamburgerBadge","showInputBoxModal","setShowInputBoxModal","title","message","value","askYesNo","inputBoxState","setInputBoxState","showMessageBoxModal","setShowMessageBoxModal","messageBoxState","setMessageBoxState","getScreenConfig","label","routeName","Math","floor","random","component","initialParams","activeTintColor","inactiveTintColor","iconGroup","iconName","focusedIconName","depth","showMessageBox","confirm","showInputBox","text","margin","d","openDrawer","canGoBack","goBack","found","forEach","screen","index","reducer","name","screenConfig"],"mappings":"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","sourcesContent":["import { DrawerNavigationProp } from '@react-navigation/drawer'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Button } from 'react-native'\r\nimport { DrawerContext } from '../navigation/DrawerContext'\r\nimport { Dynamic } from '../screens/Dynamic'\r\nimport { MessageBoxModal } from '../modals/MessageBoxModal'\r\nimport { InputBoxModal } from '../modals/InputBoxModal'\r\n\r\ninterface Props {\r\n    style?: object,\r\n    navigation: DrawerNavigationProp<any>,\r\n}\r\n\r\ninterface BasicState {\r\n    title: string,\r\n    message: string,\r\n    askYesNo: boolean,\r\n}\r\n\r\ninterface MessageBoxState extends BasicState {\r\n    confirm?: () => void\r\n}\r\n\r\ninterface InputBoxState extends BasicState {\r\n    value: string\r\n    confirm?: (text: string) => void\r\n}\r\n\r\nexport default ({ style, navigation }: Props) => {\r\n    const { screens, screenIndex, ScreenManager, setHamburgerBadge } = useContext(DrawerContext)\r\n    const [showInputBoxModal, setShowInputBoxModal] = useState(false)\r\n    const [inputBoxState, setInputBoxState] = useState<InputBoxState>({\r\n        title: '',\r\n        message: '',\r\n        value: '',\r\n        askYesNo: false,\r\n    })\r\n    const [showMessageBoxModal, setShowMessageBoxModal] = useState(false)\r\n    const [messageBoxState, setMessageBoxState] = useState<MessageBoxState>({\r\n        title: '',\r\n        message: '',\r\n        askYesNo: false,\r\n    })\r\n\r\n    const getScreenConfig = () => {\r\n        return (\r\n            {\r\n                // Names here needs to be unique for routing to work\r\n                label: 'Dynamic',\r\n                routeName: `Dynamic ${(Math.floor(Math.random() * 10000))}`,\r\n                component: Dynamic,\r\n                initialParams: {\r\n                    activeTintColor: '#123',\r\n                    inactiveTintColor: '#000',\r\n                    iconGroup: 'antdesign',\r\n                    iconName: 'paperclip',\r\n                    focusedIconName: 'bug-outline'\r\n                },\r\n                depth: 0\r\n            }\r\n        )\r\n    }\r\n\r\n    const showMessageBox = (title: string, message: string, askYesNo: boolean = false, confirm?: () => void) => {\r\n        setMessageBoxState({ title, message, askYesNo, confirm })\r\n        setShowMessageBoxModal(true)\r\n    }\r\n\r\n    const showInputBox = (title: string, message: string, value: string, askYesNo: boolean = false, confirm: (text: string) => void) => {\r\n        setInputBoxState({ title, message, askYesNo, value, confirm })\r\n        setShowInputBoxModal(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MessageBoxModal\r\n                title={messageBoxState.title}\r\n                message={messageBoxState.message}\r\n                shown={showMessageBoxModal}\r\n                askYesNo={messageBoxState.askYesNo}\r\n                confirm={messageBoxState.confirm}\r\n                dismiss={() => setShowMessageBoxModal(false)}\r\n            />\r\n            <InputBoxModal\r\n                title={inputBoxState.title}\r\n                message={inputBoxState.message}\r\n                value={inputBoxState.value}\r\n                shown={showInputBoxModal}\r\n                askYesNo={inputBoxState.askYesNo}\r\n                onChangeText={(text) => {\r\n                    inputBoxState.value = text\r\n                    setInputBoxState({ ...inputBoxState })\r\n                }}\r\n                confirm={() => {\r\n                    inputBoxState.confirm?.(inputBoxState.value)\r\n                    setShowInputBoxModal(false)\r\n                }}\r\n                dismiss={() => setShowInputBoxModal(false)}\r\n            />\r\n            <View style={style}>\r\n                <View style={{ margin: 5 }}>\r\n                    <Button\r\n                        title='Open Drawer'\r\n                        onPress={(d) => {\r\n                            navigation.openDrawer()\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View style={{ margin: 5 }}>\r\n                    <Button\r\n                        title='Back'\r\n                        onPress={(d) => {\r\n                            if (navigation.canGoBack())\r\n                                navigation.goBack()\r\n                            else\r\n                                showMessageBox('Failed', 'There is no history to go back to!')\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View style={{ margin: 5 }}>\r\n                    <Button\r\n                        title='Delete the Playground Screen'\r\n                        onPress={() => {\r\n                            let found = false\r\n                            screens.forEach((screen, index) => {\r\n                                if (ScreenManager?.reducer && screen.routeName === 'Playground') {\r\n                                    found = true\r\n                                    ScreenManager.reducer('remove', index)\r\n                                    showMessageBox('Completed', 'Removed playground screen')\r\n                                }\r\n                            })\r\n                            if (!found) {\r\n                                showMessageBox('Failed', 'There is no playground screen')\r\n                            }\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View style={{ margin: 5 }}>\r\n                    <Button\r\n                        title='Delete this Screen'\r\n                        onPress={() => {\r\n                            if (ScreenManager?.reducer && typeof screenIndex === 'number' && screenIndex >= 0) {\r\n                                const name = screens[screenIndex].routeName\r\n                                showMessageBox(\r\n                                    'Confirmation',\r\n                                    `Are you sure you want to remove ${name}?`,\r\n                                    true, () => ScreenManager.reducer('remove', screenIndex)\r\n                                )\r\n                            }\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View style={{ margin: 5 }}>\r\n                    <Button\r\n                        title='Add a Dynamic'\r\n                        onPress={() => {\r\n                            const screenConfig = getScreenConfig()\r\n                            if (ScreenManager?.reducer) {\r\n                                ScreenManager.reducer('append', 0, screenConfig)\r\n                                showMessageBox('Completed', `Added a new dynamic screen called '${screenConfig.label}' with a routeName of '${screenConfig.routeName}'`)\r\n                            }\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View style={{ margin: 5 }}>\r\n                    <Button\r\n                        title='Add a Dynamic child to this screen'\r\n                        onPress={() => {\r\n                            const screenConfig = getScreenConfig()\r\n                            if (ScreenManager?.reducer) {\r\n                                //const screenPath = ScreenManager.getScreenPath()\r\n                                //ScreenManager.addChild(screenPath, -1, screenConfig)\r\n                                //showMessageBox('Completed', `Added a new dynamic screen called '${screenConfig.label}' with a routeName of '${screenConfig.routeName}'`)\r\n                                showMessageBox('ToDo', 'ToDo')\r\n                            }\r\n                        }}\r\n                    />\r\n                </View>\r\n                <View style={{ margin: 5 }}>\r\n                    <Button\r\n                        title='Set Hamburger Badge'\r\n                        onPress={() => {\r\n                            showInputBox('Set Hamburger Badge', 'Text', '', false, (text) => {\r\n                                setHamburgerBadge?.(text)\r\n                            })\r\n                        }}\r\n                    />\r\n                </View>\r\n            </View>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}