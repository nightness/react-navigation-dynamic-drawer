{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\JoshG\\\\OneDrive\\\\Projects\\\\react-navigation-dynamic-drawer\\\\navigation\\\\DrawerContext.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useState } from 'react';\nexport var DrawerContext = createContext({\n  badges: {},\n  screens: [],\n  setBadge: function setBadge(routeName, value) {\n    return undefined;\n  },\n  setDrawerContent: function setDrawerContent(navigation, state) {\n    return undefined;\n  }\n});\n\nvar sameElements = function sameElements(a, b) {\n  return a.length === b.length && a.every(function (v, i) {\n    return v === b[i];\n  });\n};\n\nexport var DrawerProvider = function DrawerProvider(_ref) {\n  var children = _ref.children,\n      screens = _ref.screens,\n      screensDispatch = _ref.screensDispatch;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      badges = _useState2[0],\n      setBadges = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hamburgerBadge = _useState4[0],\n      setHamburgerBadge = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      navigation = _useState6[0],\n      setNavigation = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      state = _useState8[0],\n      setState = _useState8[1];\n\n  var screenIndex = state ? state.index : -1;\n\n  var setBadge = function setBadge(routeName, value) {\n    var newState = _objectSpread({}, badges);\n\n    newState[routeName] = value;\n    setBadges(newState);\n  };\n\n  var setDrawerContent = function setDrawerContent(currentNavigation, state) {\n    if (currentNavigation != navigation) setNavigation(currentNavigation);\n    setState(state);\n  };\n\n  var nodeHandler = function nodeHandler(type, node, name) {\n    if (Array.isArray(node)) {\n      var _index = ScreenManager.getScreenIndex(node);\n\n      if (_index === undefined) throw new Error(type + \": path is invalid\");\n      node = _index;\n    }\n\n    screensDispatch({\n      type: type,\n      index: node,\n      name: name\n    });\n  };\n\n  var dispatcher = function dispatcher(type, index, screen) {\n    return screensDispatch({\n      type: type,\n      index: index,\n      screen: screen\n    });\n  };\n\n  var ScreenManager = {\n    removeScreen: function removeScreen(index) {\n      var type = 'remove';\n      if (index === screenIndex && navigation && navigation.canGoBack()) navigation.goBack();\n      screensDispatch({\n        type: type,\n        index: index,\n        screen: screen\n      });\n    },\n    insertScreen: function insertScreen(index, screen) {\n      return screensDispatch({\n        type: 'insert',\n        index: index,\n        screen: screen\n      });\n    },\n    appendScreen: function appendScreen(screen) {\n      return screensDispatch({\n        type: 'append',\n        screen: screen\n      });\n    },\n    collapse: function collapse(node) {\n      return nodeHandler('collapse', node);\n    },\n    expand: function expand(node) {\n      return nodeHandler('expand', node);\n    },\n    hide: function hide(node) {\n      return nodeHandler('hide', node);\n    },\n    show: function show(node) {\n      return nodeHandler('show', node);\n    },\n    rename: function rename(node, label) {\n      return nodeHandler('rename', node, label);\n    },\n    addChild: function addChild(parentScreenPath, screenConfig) {\n      var parentIndex = ScreenManager.getScreenIndex(parentScreenPath);\n      if (parentIndex === undefined) throw new Error(\"addChild: Parent index not found\");\n      var childDepth = screens[parentIndex].depth + 1;\n\n      for (var _index2 = parentIndex + 1; _index2 <= screens.length; _index2++) {\n        var _node = screens[_index2];\n        if (_node.depth > childDepth) continue;\n\n        if (_node.depth < childDepth) {\n          screenConfig.depth = childDepth;\n          dispatcher('insert', _index2, screenConfig);\n          break;\n        }\n      }\n    },\n    insertChild: function insertChild(parentScreenPath, insertChildIndex, screenConfig) {\n      var parentIndex = ScreenManager.getScreenIndex(parentScreenPath);\n      if (parentIndex === undefined) throw new Error(\"insertChild: Parent index not found\");\n      var childDepth = screens[parentIndex].depth + 1;\n      var childIndex = -1;\n\n      for (var _index3 = parentIndex + 1; _index3 <= screens.length; _index3++) {\n        var _node2 = screens[_index3];\n        if (_node2.depth > childDepth) continue;\n        if (_node2.depth < childDepth) break;\n        childIndex++;\n\n        if (childIndex == insertChildIndex) {\n          screenConfig.depth = _node2.depth;\n          dispatcher('insert', _index3, screenConfig);\n          break;\n        }\n      }\n    },\n    removeChild: function removeChild(parentScreenPath, removeChildIndex) {\n      var parentIndex = ScreenManager.getScreenIndex(parentScreenPath);\n      if (parentIndex === undefined) throw new Error(\"removeChild: Parent index not found\");\n      var childDepth = screens[parentIndex].depth + 1;\n      var childIndex = -1;\n\n      for (var _index4 = parentIndex + 1; _index4 <= screens.length; _index4++) {\n        var _node3 = screens[_index4];\n        if (_node3.depth > childDepth) continue;\n        if (_node3.depth < childDepth) break;\n        childIndex++;\n\n        if (childIndex == removeChildIndex) {\n          if (removeChildIndex === screenIndex && navigation && navigation.canGoBack()) navigation.goBack();\n          dispatcher('remove', _index4);\n          break;\n        }\n      }\n    },\n    getScreenIndex: function getScreenIndex(screenPath) {\n      var path = [0];\n      var currentDepth = 0;\n      if (sameElements(screenPath, [0])) return 0;\n\n      for (var _index5 = 1; _index5 <= screens.length; _index5++) {\n        var depth = screens[_index5].depth;\n\n        if (depth > currentDepth) {\n          currentDepth++;\n          path.push(-1);\n        }\n\n        if (depth < currentDepth) {\n          currentDepth--;\n          path.pop();\n        }\n\n        path[currentDepth]++;\n\n        if (sameElements(screenPath, path)) {\n          return _index5;\n        }\n      }\n\n      return -1;\n    },\n    getScreenPath: function getScreenPath(searchIndex) {\n      var path = [0];\n      var currentDepth = 0;\n\n      for (var _index6 = 1; _index6 <= searchIndex; _index6++) {\n        var depth = screens[_index6].depth;\n\n        if (depth > currentDepth) {\n          currentDepth++;\n          path.push(-1);\n        }\n\n        if (depth < currentDepth) {\n          currentDepth--;\n          path.pop();\n        }\n\n        path[currentDepth]++;\n      }\n\n      return path;\n    }\n  };\n  return React.createElement(DrawerContext.Provider, {\n    value: {\n      badges: badges,\n      setBadge: setBadge,\n      navigation: navigation,\n      state: state,\n      screenIndex: screenIndex,\n      screens: screens,\n      ScreenManager: ScreenManager,\n      hamburgerBadge: hamburgerBadge,\n      setHamburgerBadge: setHamburgerBadge,\n      setDrawerContent: setDrawerContent\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/JoshG/OneDrive/Projects/react-navigation-dynamic-drawer/navigation/DrawerContext.tsx"],"names":["React","createContext","useState","DrawerContext","badges","screens","setBadge","routeName","value","undefined","setDrawerContent","navigation","state","sameElements","a","b","length","every","v","i","DrawerProvider","children","screensDispatch","setBadges","hamburgerBadge","setHamburgerBadge","setNavigation","setState","screenIndex","index","newState","currentNavigation","nodeHandler","type","node","name","Array","isArray","ScreenManager","getScreenIndex","Error","dispatcher","screen","removeScreen","canGoBack","goBack","insertScreen","appendScreen","collapse","expand","hide","show","rename","label","addChild","parentScreenPath","screenConfig","parentIndex","childDepth","depth","insertChild","insertChildIndex","childIndex","removeChild","removeChildIndex","screenPath","path","currentDepth","push","pop","getScreenPath","searchIndex"],"mappings":";;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AA6CA,OAAO,IAAMC,aAAa,GAAGF,aAAa,CAAc;AACpDG,EAAAA,MAAM,EAAE,EAD4C;AAEpDC,EAAAA,OAAO,EAAE,EAF2C;AAGpDC,EAAAA,QAAQ,EAAE,kBAACC,SAAD,EAAoBC,KAApB;AAAA,WAAsCC,SAAtC;AAAA,GAH0C;AAIpDC,EAAAA,gBAAgB,EAAE,0BAACC,UAAD,EAAqCC,KAArC;AAAA,WAAqFH,SAArF;AAAA;AAJkC,CAAd,CAAnC;;AAOP,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAcC,CAAd;AAAA,SAA8BD,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAf,IAAyBF,CAAC,CAACG,KAAF,CAAQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,KAAKH,CAAC,CAACI,CAAD,CAAjB;AAAA,GAAR,CAAvD;AAAA,CAArB;;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAmD;AAAA,MAAhDC,QAAgD,QAAhDA,QAAgD;AAAA,MAAtChB,OAAsC,QAAtCA,OAAsC;AAAA,MAA7BiB,eAA6B,QAA7BA,eAA6B;;AAAA,kBACjDpB,QAAQ,CAAS,EAAT,CADyC;AAAA;AAAA,MACtEE,MADsE;AAAA,MAC9DmB,SAD8D;;AAAA,mBAEjCrB,QAAQ,EAFyB;AAAA;AAAA,MAEtEsB,cAFsE;AAAA,MAEtDC,iBAFsD;;AAAA,mBAGzCvB,QAAQ,EAHiC;AAAA;AAAA,MAGtES,UAHsE;AAAA,MAG1De,aAH0D;;AAAA,mBAInDxB,QAAQ,EAJ2C;AAAA;AAAA,MAItEU,KAJsE;AAAA,MAI/De,QAJ+D;;AAK7E,MAAMC,WAAW,GAAGhB,KAAK,GAAGA,KAAK,CAACiB,KAAT,GAAiB,CAAC,CAA3C;;AAEA,MAAMvB,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAoBC,KAApB,EAA4C;AACzD,QAAIsB,QAAQ,qBAAQ1B,MAAR,CAAZ;;AACA0B,IAAAA,QAAQ,CAACvB,SAAD,CAAR,GAAsBC,KAAtB;AACAe,IAAAA,SAAS,CAACO,QAAD,CAAT;AACH,GAJD;;AAMA,MAAMpB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACqB,iBAAD,EAA4CnB,KAA5C,EAA4F;AACjH,QAAImB,iBAAiB,IAAIpB,UAAzB,EACIe,aAAa,CAACK,iBAAD,CAAb;AACJJ,IAAAA,QAAQ,CAACf,KAAD,CAAR;AACH,GAJD;;AAMA,MAAMoB,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAsBC,IAAtB,EAA+CC,IAA/C,EAAiE;AACjF,QAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACrB,UAAML,MAAK,GAAGS,aAAa,CAACC,cAAd,CAA6BL,IAA7B,CAAd;;AACA,UAAIL,MAAK,KAAKpB,SAAd,EACI,MAAM,IAAI+B,KAAJ,CAAaP,IAAb,uBAAN;AACJC,MAAAA,IAAI,GAAGL,MAAP;AACH;;AAEDP,IAAAA,eAAe,CAAC;AAAEW,MAAAA,IAAI,EAAJA,IAAF;AAAQJ,MAAAA,KAAK,EAAEK,IAAf;AAAqBC,MAAAA,IAAI,EAAJA;AAArB,KAAD,CAAf;AACH,GATD;;AAWA,MAAMM,UAAU,GAAG,SAAbA,UAAa,CACfR,IADe,EAEfJ,KAFe,EAGfa,MAHe;AAAA,WAGgBpB,eAAe,CAAC;AAAEW,MAAAA,IAAI,EAAJA,IAAF;AAAQJ,MAAAA,KAAK,EAALA,KAAR;AAAea,MAAAA,MAAM,EAANA;AAAf,KAAD,CAH/B;AAAA,GAAnB;;AAKA,MAAMJ,aAAgC,GAAG;AACrCK,IAAAA,YAAY,EAAE,sBAACd,KAAD,EAAmB;AAC7B,UAAMI,IAAI,GAAG,QAAb;AACA,UAAIJ,KAAK,KAAKD,WAAV,IAAyBjB,UAAzB,IAAuCA,UAAU,CAACiC,SAAX,EAA3C,EACIjC,UAAU,CAACkC,MAAX;AACJvB,MAAAA,eAAe,CAAC;AAAEW,QAAAA,IAAI,EAAJA,IAAF;AAAQJ,QAAAA,KAAK,EAALA,KAAR;AAAea,QAAAA,MAAM,EAANA;AAAf,OAAD,CAAf;AACH,KANoC;AAOrCI,IAAAA,YAAY,EAAE,sBAACjB,KAAD,EAAgBa,MAAhB;AAAA,aACVpB,eAAe,CAAC;AAAEW,QAAAA,IAAI,EAAE,QAAR;AAAkBJ,QAAAA,KAAK,EAALA,KAAlB;AAAyBa,QAAAA,MAAM,EAANA;AAAzB,OAAD,CADL;AAAA,KAPuB;AASrCK,IAAAA,YAAY,EAAE,sBAACL,MAAD;AAAA,aACVpB,eAAe,CAAC;AAAEW,QAAAA,IAAI,EAAE,QAAR;AAAkBS,QAAAA,MAAM,EAANA;AAAlB,OAAD,CADL;AAAA,KATuB;AAWrCM,IAAAA,QAAQ,EAAE,kBAACd,IAAD;AAAA,aAA6BF,WAAW,CAAC,UAAD,EAAaE,IAAb,CAAxC;AAAA,KAX2B;AAYrCe,IAAAA,MAAM,EAAE,gBAACf,IAAD;AAAA,aAA6BF,WAAW,CAAC,QAAD,EAAWE,IAAX,CAAxC;AAAA,KAZ6B;AAarCgB,IAAAA,IAAI,EAAE,cAAChB,IAAD;AAAA,aAA6BF,WAAW,CAAC,MAAD,EAASE,IAAT,CAAxC;AAAA,KAb+B;AAcrCiB,IAAAA,IAAI,EAAE,cAACjB,IAAD;AAAA,aAA6BF,WAAW,CAAC,MAAD,EAASE,IAAT,CAAxC;AAAA,KAd+B;AAerCkB,IAAAA,MAAM,EAAE,gBAAClB,IAAD,EAA0BmB,KAA1B;AAAA,aAA4CrB,WAAW,CAAC,QAAD,EAAWE,IAAX,EAAiBmB,KAAjB,CAAvD;AAAA,KAf6B;AAgBrCC,IAAAA,QAAQ,EAAE,kBAACC,gBAAD,EAA6BC,YAA7B,EAAiE;AACvE,UAAMC,WAAW,GAAGnB,aAAa,CAACC,cAAd,CAA6BgB,gBAA7B,CAApB;AACA,UAAIE,WAAW,KAAKhD,SAApB,EAA+B,MAAM,IAAI+B,KAAJ,oCAAN;AAC/B,UAAMkB,UAAU,GAAGrD,OAAO,CAACoD,WAAD,CAAP,CAAqBE,KAArB,GAA6B,CAAhD;;AACA,WAAK,IAAI9B,OAAK,GAAG4B,WAAW,GAAG,CAA/B,EAAkC5B,OAAK,IAAIxB,OAAO,CAACW,MAAnD,EAA2Da,OAAK,EAAhE,EAAoE;AAChE,YAAMK,KAAI,GAAG7B,OAAO,CAACwB,OAAD,CAApB;AACA,YAAIK,KAAI,CAACyB,KAAL,GAAaD,UAAjB,EAA6B;;AAE7B,YAAIxB,KAAI,CAACyB,KAAL,GAAaD,UAAjB,EAA6B;AACzBF,UAAAA,YAAY,CAACG,KAAb,GAAqBD,UAArB;AACAjB,UAAAA,UAAU,CAAC,QAAD,EAAWZ,OAAX,EAAkB2B,YAAlB,CAAV;AACA;AACH;AACJ;AACJ,KA9BoC;AA+BrCI,IAAAA,WAAW,EAAE,qBAACL,gBAAD,EAA6BM,gBAA7B,EAAuDL,YAAvD,EAA2F;AACpG,UAAMC,WAAW,GAAGnB,aAAa,CAACC,cAAd,CAA6BgB,gBAA7B,CAApB;AACA,UAAIE,WAAW,KAAKhD,SAApB,EAA+B,MAAM,IAAI+B,KAAJ,uCAAN;AAC/B,UAAMkB,UAAU,GAAGrD,OAAO,CAACoD,WAAD,CAAP,CAAqBE,KAArB,GAA6B,CAAhD;AACA,UAAIG,UAAU,GAAG,CAAC,CAAlB;;AACA,WAAK,IAAIjC,OAAK,GAAG4B,WAAW,GAAG,CAA/B,EAAkC5B,OAAK,IAAIxB,OAAO,CAACW,MAAnD,EAA2Da,OAAK,EAAhE,EAAoE;AAChE,YAAMK,MAAI,GAAG7B,OAAO,CAACwB,OAAD,CAApB;AACA,YAAIK,MAAI,CAACyB,KAAL,GAAaD,UAAjB,EAA6B;AAC7B,YAAIxB,MAAI,CAACyB,KAAL,GAAaD,UAAjB,EAA6B;AAC7BI,QAAAA,UAAU;;AACV,YAAIA,UAAU,IAAID,gBAAlB,EAAoC;AAChCL,UAAAA,YAAY,CAACG,KAAb,GAAqBzB,MAAI,CAACyB,KAA1B;AACAlB,UAAAA,UAAU,CAAC,QAAD,EAAWZ,OAAX,EAAkB2B,YAAlB,CAAV;AACA;AACH;AACJ;AACJ,KA/CoC;AAgDrCO,IAAAA,WAAW,EAAE,qBAACR,gBAAD,EAA6BS,gBAA7B,EAA0D;AACnE,UAAMP,WAAW,GAAGnB,aAAa,CAACC,cAAd,CAA6BgB,gBAA7B,CAApB;AACA,UAAIE,WAAW,KAAKhD,SAApB,EAA+B,MAAM,IAAI+B,KAAJ,uCAAN;AAC/B,UAAMkB,UAAU,GAAGrD,OAAO,CAACoD,WAAD,CAAP,CAAqBE,KAArB,GAA6B,CAAhD;AACA,UAAIG,UAAU,GAAG,CAAC,CAAlB;;AACA,WAAK,IAAIjC,OAAK,GAAG4B,WAAW,GAAG,CAA/B,EAAkC5B,OAAK,IAAIxB,OAAO,CAACW,MAAnD,EAA2Da,OAAK,EAAhE,EAAoE;AAChE,YAAMK,MAAI,GAAG7B,OAAO,CAACwB,OAAD,CAApB;AACA,YAAIK,MAAI,CAACyB,KAAL,GAAaD,UAAjB,EAA6B;AAC7B,YAAIxB,MAAI,CAACyB,KAAL,GAAaD,UAAjB,EAA6B;AAC7BI,QAAAA,UAAU;;AACV,YAAIA,UAAU,IAAIE,gBAAlB,EAAoC;AAEhC,cAAIA,gBAAgB,KAAKpC,WAArB,IAAoCjB,UAApC,IAAkDA,UAAU,CAACiC,SAAX,EAAtD,EACIjC,UAAU,CAACkC,MAAX;AACJJ,UAAAA,UAAU,CAAC,QAAD,EAAWZ,OAAX,CAAV;AACA;AACH;AACJ;AACJ,KAlEoC;AAmErCU,IAAAA,cAAc,EAAE,wBAAC0B,UAAD,EAA0B;AACtC,UAAIC,IAAc,GAAG,CAAC,CAAD,CAArB;AACA,UAAIC,YAAY,GAAG,CAAnB;AAEA,UAAItD,YAAY,CAACoD,UAAD,EAAa,CAAC,CAAD,CAAb,CAAhB,EAAmC,OAAO,CAAP;;AACnC,WAAK,IAAIpC,OAAK,GAAG,CAAjB,EAAoBA,OAAK,IAAIxB,OAAO,CAACW,MAArC,EAA6Ca,OAAK,EAAlD,EAAsD;AAAA,YAE1C8B,KAF0C,GAEhCtD,OAAO,CAACwB,OAAD,CAFyB,CAE1C8B,KAF0C;;AAGlD,YAAIA,KAAK,GAAGQ,YAAZ,EAA0B;AACtBA,UAAAA,YAAY;AACZD,UAAAA,IAAI,CAACE,IAAL,CAAU,CAAC,CAAX;AACH;;AACD,YAAIT,KAAK,GAAGQ,YAAZ,EAA0B;AACtBA,UAAAA,YAAY;AACZD,UAAAA,IAAI,CAACG,GAAL;AACH;;AAGDH,QAAAA,IAAI,CAACC,YAAD,CAAJ;;AAEA,YAAItD,YAAY,CAACoD,UAAD,EAAaC,IAAb,CAAhB,EAAoC;AAChC,iBAAOrC,OAAP;AACH;AACJ;;AACD,aAAO,CAAC,CAAR;AACH,KA5FoC;AA6FrCyC,IAAAA,aAAa,EAAE,uBAACC,WAAD,EAAyB;AACpC,UAAIL,IAAc,GAAG,CAAC,CAAD,CAArB;AACA,UAAIC,YAAY,GAAG,CAAnB;;AAEA,WAAK,IAAItC,OAAK,GAAG,CAAjB,EAAoBA,OAAK,IAAI0C,WAA7B,EAA0C1C,OAAK,EAA/C,EAAmD;AAAA,YAEvC8B,KAFuC,GAE7BtD,OAAO,CAACwB,OAAD,CAFsB,CAEvC8B,KAFuC;;AAG/C,YAAIA,KAAK,GAAGQ,YAAZ,EAA0B;AACtBA,UAAAA,YAAY;AACZD,UAAAA,IAAI,CAACE,IAAL,CAAU,CAAC,CAAX;AACH;;AACD,YAAIT,KAAK,GAAGQ,YAAZ,EAA0B;AACtBA,UAAAA,YAAY;AACZD,UAAAA,IAAI,CAACG,GAAL;AACH;;AAGDH,QAAAA,IAAI,CAACC,YAAD,CAAJ;AACH;;AAED,aAAOD,IAAP;AACH;AAlHoC,GAAzC;AAqHA,SACI,oBAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACH9D,MAAAA,MAAM,EAANA,MADG;AAEHE,MAAAA,QAAQ,EAARA,QAFG;AAGHK,MAAAA,UAAU,EAAVA,UAHG;AAIHC,MAAAA,KAAK,EAALA,KAJG;AAKHgB,MAAAA,WAAW,EAAXA,WALG;AAMHvB,MAAAA,OAAO,EAAPA,OANG;AAOHiC,MAAAA,aAAa,EAAbA,aAPG;AAQHd,MAAAA,cAAc,EAAdA,cARG;AASHC,MAAAA,iBAAiB,EAAjBA,iBATG;AAUHf,MAAAA,gBAAgB,EAAhBA;AAVG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcKW,QAdL,CADJ;AAkBH,CA1KM","sourcesContent":["import { DrawerNavigationState, NavigationHelpers, ParamListBase } from '@react-navigation/native'\r\nimport React, { createContext, useState } from 'react'\r\nimport { Badges, NavigationElements, NavigationElement } from './NavigationTypes'\r\nimport { ScreenActions } from './RoutingReducer'\r\n\r\ninterface Props {\r\n    children: JSX.Element | JSX.Element[],\r\n    screens: NavigationElements,\r\n    screensDispatch: React.Dispatch<any>\r\n}\r\n\r\ninterface ReducerProps {\r\n    type: ScreenActions,\r\n    index?: number,\r\n    screen?: NavigationElement\r\n}\r\n\r\ninterface ScreenManagerType {\r\n    removeScreen: (index: number) => void,\r\n    insertScreen: (index: number, screen?: NavigationElement) => void,\r\n    appendScreen: (screen?: NavigationElement) => void,\r\n    getScreenIndex: (screenPath: [number]) => number | undefined,\r\n    getScreenPath: (index: number) => [number] | undefined,\r\n    addChild: (parentScreenPath: [number], screenConfig: NavigationElement) => void,\r\n    insertChild: (screenPath: [number], index: number, screenConfig: NavigationElement) => void,\r\n    removeChild: (parentScreenPath: [number], removeChildIndex: number) => void,\r\n    collapse: (child: number | [number]) => void,\r\n    expand: (node: number | [number]) => void,\r\n    hide: (node: number | [number]) => void,\r\n    show: (node: number | [number]) => void,\r\n    rename: (node: number | [number], label: string) => void\r\n}\r\n\r\ntype ContextType = {\r\n    badges: Badges,\r\n    setBadge: (routeName: string, value: string) => void,\r\n    screens: NavigationElements,\r\n    ScreenManager?: ScreenManagerType,\r\n    hamburgerBadge?: string,\r\n    setHamburgerBadge?: React.Dispatch<React.SetStateAction<string | undefined>>\r\n    navigation?: NavigationHelpers<any>,\r\n    state?: DrawerNavigationState<ParamListBase>,\r\n    screenIndex?: number,\r\n    setDrawerContent: (navigation: NavigationHelpers<any>, state: DrawerNavigationState<ParamListBase>) => void,\r\n}\r\n\r\nexport const DrawerContext = createContext<ContextType>({\r\n    badges: {},\r\n    screens: [],\r\n    setBadge: (routeName: string, value: string) => undefined,\r\n    setDrawerContent: (navigation: NavigationHelpers<any>, state: DrawerNavigationState<ParamListBase>) => undefined\r\n})\r\n\r\nconst sameElements = (a: [number], b: [number]) => a.length === b.length && a.every((v, i) => v === b[i])\r\n\r\nexport const DrawerProvider = ({ children, screens, screensDispatch }: Props) => {\r\n    const [badges, setBadges] = useState<Badges>({})\r\n    const [hamburgerBadge, setHamburgerBadge] = useState<string>()\r\n    const [navigation, setNavigation] = useState<NavigationHelpers<any>>()\r\n    const [state, setState] = useState<DrawerNavigationState<ParamListBase>>()\r\n    const screenIndex = state ? state.index : -1\r\n\r\n    const setBadge = (routeName: string, value: string): void => {\r\n        let newState = { ...badges }\r\n        newState[routeName] = value\r\n        setBadges(newState)\r\n    }\r\n\r\n    const setDrawerContent = (currentNavigation: NavigationHelpers<any>, state: DrawerNavigationState<ParamListBase>) => {\r\n        if (currentNavigation != navigation)\r\n            setNavigation(currentNavigation)\r\n        setState(state)\r\n    }\r\n\r\n    const nodeHandler = (type: ScreenActions, node: number | [number], name?: string) => {\r\n        if (Array.isArray(node)) {\r\n            const index = ScreenManager.getScreenIndex(node)\r\n            if (index === undefined)\r\n                throw new Error(`${type}: path is invalid`)\r\n            node = index\r\n        }\r\n        // At this point node is for sure an index\r\n        screensDispatch({ type, index: node, name })\r\n    }\r\n\r\n    const dispatcher = (\r\n        type: ScreenActions,\r\n        index?: number,\r\n        screen?: NavigationElement) => screensDispatch({ type, index, screen })\r\n\r\n    const ScreenManager: ScreenManagerType = {\r\n        removeScreen: (index: number) => {\r\n            const type = 'remove'\r\n            if (index === screenIndex && navigation && navigation.canGoBack())\r\n                navigation.goBack()\r\n            screensDispatch({ type, index, screen })\r\n        },\r\n        insertScreen: (index: number, screen?: NavigationElement) =>\r\n            screensDispatch({ type: 'insert', index, screen }),\r\n        appendScreen: (screen?: NavigationElement) =>\r\n            screensDispatch({ type: 'append', screen }),\r\n        collapse: (node: number | [number]) => nodeHandler('collapse', node),\r\n        expand: (node: number | [number]) => nodeHandler('expand', node),\r\n        hide: (node: number | [number]) => nodeHandler('hide', node),\r\n        show: (node: number | [number]) => nodeHandler('show', node),\r\n        rename: (node: number | [number], label: string) => nodeHandler('rename', node, label),\r\n        addChild: (parentScreenPath: [number], screenConfig: NavigationElement) => {\r\n            const parentIndex = ScreenManager.getScreenIndex(parentScreenPath)\r\n            if (parentIndex === undefined) throw new Error(`addChild: Parent index not found`)\r\n            const childDepth = screens[parentIndex].depth + 1\r\n            for (let index = parentIndex + 1; index <= screens.length; index++) {\r\n                const node = screens[index]\r\n                if (node.depth > childDepth) continue\r\n\r\n                if (node.depth < childDepth) {\r\n                    screenConfig.depth = childDepth\r\n                    dispatcher('insert', index, screenConfig)\r\n                    break\r\n                }\r\n            }\r\n        },\r\n        insertChild: (parentScreenPath: [number], insertChildIndex: number, screenConfig: NavigationElement) => {\r\n            const parentIndex = ScreenManager.getScreenIndex(parentScreenPath)\r\n            if (parentIndex === undefined) throw new Error(`insertChild: Parent index not found`)\r\n            const childDepth = screens[parentIndex].depth + 1\r\n            var childIndex = -1\r\n            for (let index = parentIndex + 1; index <= screens.length; index++) {\r\n                const node = screens[index]\r\n                if (node.depth > childDepth) continue\r\n                if (node.depth < childDepth) break\r\n                childIndex++\r\n                if (childIndex == insertChildIndex) {\r\n                    screenConfig.depth = node.depth\r\n                    dispatcher('insert', index, screenConfig)\r\n                    break\r\n                }\r\n            }\r\n        },\r\n        removeChild: (parentScreenPath: [number], removeChildIndex: number) => {\r\n            const parentIndex = ScreenManager.getScreenIndex(parentScreenPath)\r\n            if (parentIndex === undefined) throw new Error(`removeChild: Parent index not found`)\r\n            const childDepth = screens[parentIndex].depth + 1\r\n            var childIndex = -1\r\n            for (let index = parentIndex + 1; index <= screens.length; index++) {\r\n                const node = screens[index]\r\n                if (node.depth > childDepth) continue\r\n                if (node.depth < childDepth) break\r\n                childIndex++\r\n                if (childIndex == removeChildIndex) {\r\n                    // If removing the current screen, go back in the history first, then remove\r\n                    if (removeChildIndex === screenIndex && navigation && navigation.canGoBack())\r\n                        navigation.goBack()\r\n                    dispatcher('remove', index)\r\n                    break\r\n                }\r\n            }\r\n        },\r\n        getScreenIndex: (screenPath: [number]) => {\r\n            let path: [number] = [0]\r\n            let currentDepth = 0\r\n\r\n            if (sameElements(screenPath, [0])) return 0\r\n            for (let index = 1; index <= screens.length; index++) {\r\n                // Check for a depth change\r\n                const { depth } = screens[index]\r\n                if (depth > currentDepth) {\r\n                    currentDepth++\r\n                    path.push(-1)\r\n                }\r\n                if (depth < currentDepth) {\r\n                    currentDepth--\r\n                    path.pop()\r\n                }\r\n\r\n                // Increment the path's index for this depth\r\n                path[currentDepth]++\r\n\r\n                if (sameElements(screenPath, path)) {\r\n                    return index\r\n                }\r\n            }\r\n            return -1\r\n        },\r\n        getScreenPath: (searchIndex: number) => {\r\n            let path: [number] = [0]\r\n            let currentDepth = 0\r\n\r\n            for (let index = 1; index <= searchIndex; index++) {\r\n                // Check for a depth change\r\n                const { depth } = screens[index]\r\n                if (depth > currentDepth) {\r\n                    currentDepth++\r\n                    path.push(-1)\r\n                }\r\n                if (depth < currentDepth) {\r\n                    currentDepth--\r\n                    path.pop()\r\n                }\r\n\r\n                // Increment the path's index for this depth\r\n                path[currentDepth]++\r\n            }\r\n\r\n            return path\r\n        }\r\n    }\r\n\r\n    return (\r\n        <DrawerContext.Provider\r\n            value={{\r\n                badges,\r\n                setBadge,\r\n                navigation,\r\n                state,\r\n                screenIndex,\r\n                screens,\r\n                ScreenManager,\r\n                hamburgerBadge,\r\n                setHamburgerBadge,\r\n                setDrawerContent\r\n            }}\r\n        >\r\n            {children}\r\n        </DrawerContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}